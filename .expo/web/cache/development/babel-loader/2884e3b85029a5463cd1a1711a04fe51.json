{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState } from \"react\";\nexport var DashboardContext = createContext({});\nexport function DashboardContextProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentProject = _useState2[0],\n      setCurrentProject = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isModalOpen = _useState4[0],\n      setIsModalOpen = _useState4[1];\n\n  var changeCurrentProject = function changeCurrentProject(project) {\n    return setCurrentProject(project);\n  };\n\n  var toggleModal = function toggleModal() {\n    return setIsModalOpen(function (state) {\n      return !state;\n    });\n  };\n\n  return React.createElement(DashboardContext.Provider, {\n    value: {\n      currentProject: currentProject,\n      changeCurrentProject: changeCurrentProject,\n      isModalOpen: isModalOpen,\n      toggleModal: toggleModal\n    }\n  }, children);\n}","map":{"version":3,"names":["React","createContext","useState","DashboardContext","DashboardContextProvider","children","currentProject","setCurrentProject","isModalOpen","setIsModalOpen","changeCurrentProject","project","toggleModal","state"],"sources":["D:/codes/Next/pomodoro-dash/src/context/Dashboard.tsx"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\ntype DashboardContextType = {\r\n  currentProject: string;\r\n  isModalOpen: boolean;\r\n  toggleModal: () => void;\r\n  changeCurrentProject: (project: string) => void;\r\n}\r\n\r\ntype DashboardContextProviderProps = {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const DashboardContext = createContext({} as DashboardContextType);\r\n\r\nexport function DashboardContextProvider ({ children }: DashboardContextProviderProps) {\r\n  const [currentProject, setCurrentProject] = useState<string>(\"\");\r\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n\r\n  const changeCurrentProject = (project: string) => setCurrentProject(project);\r\n  const toggleModal = () => setIsModalOpen(state => !state);\r\n  \r\n  return (\r\n    <DashboardContext.Provider value={{\r\n      currentProject,\r\n      changeCurrentProject,\r\n      isModalOpen,\r\n      toggleModal\r\n    }}>\r\n      { children }\r\n    </DashboardContext.Provider>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAaA,OAAO,IAAMC,gBAAgB,GAAGF,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASG,wBAAT,OAAgF;EAAA,IAA3CC,QAA2C,QAA3CA,QAA2C;;EACrF,gBAA4CH,QAAQ,CAAS,EAAT,CAApD;EAAA;EAAA,IAAOI,cAAP;EAAA,IAAuBC,iBAAvB;;EACA,iBAAsCL,QAAQ,CAAU,KAAV,CAA9C;EAAA;EAAA,IAAOM,WAAP;EAAA,IAAoBC,cAApB;;EAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,OAAD;IAAA,OAAqBJ,iBAAiB,CAACI,OAAD,CAAtC;EAAA,CAA7B;;EACA,IAAMC,WAAW,GAAG,SAAdA,WAAc;IAAA,OAAMH,cAAc,CAAC,UAAAI,KAAK;MAAA,OAAI,CAACA,KAAL;IAAA,CAAN,CAApB;EAAA,CAApB;;EAEA,OACE,oBAAC,gBAAD,CAAkB,QAAlB;IAA2B,KAAK,EAAE;MAChCP,cAAc,EAAdA,cADgC;MAEhCI,oBAAoB,EAApBA,oBAFgC;MAGhCF,WAAW,EAAXA,WAHgC;MAIhCI,WAAW,EAAXA;IAJgC;EAAlC,GAMIP,QANJ,CADF;AAUD"},"metadata":{},"sourceType":"module"}