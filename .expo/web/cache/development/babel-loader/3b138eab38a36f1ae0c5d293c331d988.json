{"ast":null,"code":"import { canUseDOM } from \"fbjs/lib/ExecutionEnvironment\";\nimport invariant from \"fbjs/lib/invariant\";\nvar dimensions = {\n  window: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  },\n  screen: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  }\n};\nvar listeners = {};\n\nvar Dimensions = function () {\n  function Dimensions() {}\n\n  Dimensions.get = function get(dimension) {\n    invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  };\n\n  Dimensions.set = function set(initialDimensions) {\n    if (initialDimensions) {\n      if (canUseDOM) {\n        invariant(false, \"Dimensions cannot be set in the browser\");\n      } else {\n        if (initialDimensions.screen != null) {\n          dimensions.screen = initialDimensions.screen;\n        }\n\n        if (initialDimensions.window != null) {\n          dimensions.window = initialDimensions.window;\n        }\n      }\n    }\n  };\n\n  Dimensions._update = function _update() {\n    if (!canUseDOM) {\n      return;\n    }\n\n    var win = window;\n    var docEl = win.document.documentElement;\n    dimensions.window = {\n      fontScale: 1,\n      height: docEl.clientHeight,\n      scale: win.devicePixelRatio || 1,\n      width: docEl.clientWidth\n    };\n    dimensions.screen = {\n      fontScale: 1,\n      height: win.screen.height,\n      scale: win.devicePixelRatio || 1,\n      width: win.screen.width\n    };\n\n    if (Array.isArray(listeners[\"change\"])) {\n      listeners[\"change\"].forEach(function (handler) {\n        return handler(dimensions);\n      });\n    }\n  };\n\n  Dimensions.addEventListener = function addEventListener(type, handler) {\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n  };\n\n  Dimensions.removeEventListener = function removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(function (_handler) {\n        return _handler !== handler;\n      });\n    }\n  };\n\n  return Dimensions;\n}();\n\nexport { Dimensions as default };\n\nif (canUseDOM) {\n  Dimensions._update();\n\n  window.addEventListener(\"resize\", Dimensions._update, false);\n}","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\react-native-web\\dist\\exports\\Dimensions\\index.js"],"names":["canUseDOM","invariant","dimensions","window","fontScale","height","scale","width","screen","listeners","Dimensions","get","dimension","set","initialDimensions","_update","win","docEl","document","documentElement","clientHeight","devicePixelRatio","clientWidth","Array","isArray","forEach","handler","addEventListener","type","push","removeEventListener","filter","_handler","default"],"mappings":"AASA,SAASA,SAAT,QAA0B,+BAA1B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,IAAIC,UAAU,GAAG;EACfC,MAAM,EAAE;IACNC,SAAS,EAAE,CADL;IAENC,MAAM,EAAE,CAFF;IAGNC,KAAK,EAAE,CAHD;IAINC,KAAK,EAAE;EAJD,CADO;EAOfC,MAAM,EAAE;IACNJ,SAAS,EAAE,CADL;IAENC,MAAM,EAAE,CAFF;IAGNC,KAAK,EAAE,CAHD;IAINC,KAAK,EAAE;EAJD;AAPO,CAAjB;AAcA,IAAIE,SAAS,GAAG,EAAhB;;AAEA,IAAIC,UAAU,GAAgB,YAAY;EACxC,SAASA,UAAT,GAAsB,CAAE;;EAExBA,UAAU,CAACC,GAAXD,GAAiB,SAASC,GAAT,CAAaC,SAAb,EAAwB;IACvCX,SAAS,CAACC,UAAU,CAACU,SAAD,CAAX,EAAwB,8BAA8BA,SAAtD,CAATX;IACA,OAAOC,UAAU,CAACU,SAAD,CAAjB;EACD,CAHDF;;EAKAA,UAAU,CAACG,GAAXH,GAAiB,SAASG,GAAT,CAAaC,iBAAb,EAAgC;IAC/C,IAAIA,iBAAJ,EAAuB;MACrB,IAAId,SAAJ,EAAe;QACbC,SAAS,CAAC,KAAD,EAAQ,yCAAR,CAATA;MACD,CAFD,MAEO;QACL,IAAIa,iBAAiB,CAACN,MAAlBM,IAA4B,IAAhC,EAAsC;UACpCZ,UAAU,CAACM,MAAXN,GAAoBY,iBAAiB,CAACN,MAAtCN;QACD;;QAED,IAAIY,iBAAiB,CAACX,MAAlBW,IAA4B,IAAhC,EAAsC;UACpCZ,UAAU,CAACC,MAAXD,GAAoBY,iBAAiB,CAACX,MAAtCD;QACD;MACF;IACF;EACF,CAdDQ;;EAgBAA,UAAU,CAACK,OAAXL,GAAqB,SAASK,OAAT,GAAmB;IACtC,IAAI,CAACf,SAAL,EAAgB;MACd;IACD;;IAED,IAAIgB,GAAG,GAAGb,MAAV;IACA,IAAIc,KAAK,GAAGD,GAAG,CAACE,QAAJF,CAAaG,eAAzB;IACAjB,UAAU,CAACC,MAAXD,GAAoB;MAClBE,SAAS,EAAE,CADO;MAElBC,MAAM,EAAEY,KAAK,CAACG,YAFI;MAGlBd,KAAK,EAAEU,GAAG,CAACK,gBAAJL,IAAwB,CAHb;MAIlBT,KAAK,EAAEU,KAAK,CAACK;IAJK,CAApBpB;IAMAA,UAAU,CAACM,MAAXN,GAAoB;MAClBE,SAAS,EAAE,CADO;MAElBC,MAAM,EAAEW,GAAG,CAACR,MAAJQ,CAAWX,MAFD;MAGlBC,KAAK,EAAEU,GAAG,CAACK,gBAAJL,IAAwB,CAHb;MAIlBT,KAAK,EAAES,GAAG,CAACR,MAAJQ,CAAWT;IAJA,CAApBL;;IAOA,IAAIqB,KAAK,CAACC,OAAND,CAAcd,SAAS,CAAC,QAAD,CAAvBc,CAAJ,EAAwC;MACtCd,SAAS,CAAC,QAAD,CAATA,CAAoBgB,OAApBhB,CAA4B,UAAUiB,OAAV,EAAmB;QAC7C,OAAOA,OAAO,CAACxB,UAAD,CAAd;MACD,CAFDO;IAGD;EACF,CAzBDC;;EA2BAA,UAAU,CAACiB,gBAAXjB,GAA8B,SAASiB,gBAAT,CAA0BC,IAA1B,EAAgCF,OAAhC,EAAyC;IACrEjB,SAAS,CAACmB,IAAD,CAATnB,GAAkBA,SAAS,CAACmB,IAAD,CAATnB,IAAmB,EAArCA;IACAA,SAAS,CAACmB,IAAD,CAATnB,CAAgBoB,IAAhBpB,CAAqBiB,OAArBjB;EACD,CAHDC;;EAKAA,UAAU,CAACoB,mBAAXpB,GAAiC,SAASoB,mBAAT,CAA6BF,IAA7B,EAAmCF,OAAnC,EAA4C;IAC3E,IAAIH,KAAK,CAACC,OAAND,CAAcd,SAAS,CAACmB,IAAD,CAAvBL,CAAJ,EAAoC;MAClCd,SAAS,CAACmB,IAAD,CAATnB,GAAkBA,SAAS,CAACmB,IAAD,CAATnB,CAAgBsB,MAAhBtB,CAAuB,UAAUuB,QAAV,EAAoB;QAC3D,OAAOA,QAAQ,KAAKN,OAApB;MACD,CAFiBjB,CAAlBA;IAGD;EACF,CANDC;;EAQA,OAAOA,UAAP;AACD,CAjE6B,EAA9B;;AAmEA,SAASA,UAAU,IAAIuB,OAAvB;;AAEA,IAAIjC,SAAJ,EAAe;EACbU,UAAU,CAACK,OAAXL;;EAEAP,MAAM,CAACwB,gBAAPxB,CAAwB,QAAxBA,EAAkCO,UAAU,CAACK,OAA7CZ,EAAsD,KAAtDA;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar dimensions = {\n  window: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  },\n  screen: {\n    fontScale: 1,\n    height: 0,\n    scale: 1,\n    width: 0\n  }\n};\nvar listeners = {};\n\nvar Dimensions = /*#__PURE__*/function () {\n  function Dimensions() {}\n\n  Dimensions.get = function get(dimension) {\n    invariant(dimensions[dimension], \"No dimension set for key \" + dimension);\n    return dimensions[dimension];\n  };\n\n  Dimensions.set = function set(initialDimensions) {\n    if (initialDimensions) {\n      if (canUseDOM) {\n        invariant(false, 'Dimensions cannot be set in the browser');\n      } else {\n        if (initialDimensions.screen != null) {\n          dimensions.screen = initialDimensions.screen;\n        }\n\n        if (initialDimensions.window != null) {\n          dimensions.window = initialDimensions.window;\n        }\n      }\n    }\n  };\n\n  Dimensions._update = function _update() {\n    if (!canUseDOM) {\n      return;\n    }\n\n    var win = window;\n    var docEl = win.document.documentElement;\n    dimensions.window = {\n      fontScale: 1,\n      height: docEl.clientHeight,\n      scale: win.devicePixelRatio || 1,\n      width: docEl.clientWidth\n    };\n    dimensions.screen = {\n      fontScale: 1,\n      height: win.screen.height,\n      scale: win.devicePixelRatio || 1,\n      width: win.screen.width\n    };\n\n    if (Array.isArray(listeners['change'])) {\n      listeners['change'].forEach(function (handler) {\n        return handler(dimensions);\n      });\n    }\n  };\n\n  Dimensions.addEventListener = function addEventListener(type, handler) {\n    listeners[type] = listeners[type] || [];\n    listeners[type].push(handler);\n  };\n\n  Dimensions.removeEventListener = function removeEventListener(type, handler) {\n    if (Array.isArray(listeners[type])) {\n      listeners[type] = listeners[type].filter(function (_handler) {\n        return _handler !== handler;\n      });\n    }\n  };\n\n  return Dimensions;\n}();\n\nexport { Dimensions as default };\n\nif (canUseDOM) {\n  Dimensions._update();\n\n  window.addEventListener('resize', Dimensions._update, false);\n}"]},"metadata":{},"sourceType":"module"}