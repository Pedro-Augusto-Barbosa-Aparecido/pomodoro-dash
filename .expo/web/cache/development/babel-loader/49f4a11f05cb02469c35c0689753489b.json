{"ast":null,"code":"import getBoundingClientRect from \"../../modules/getBoundingClientRect\";\nimport ResponderTouchHistoryStore from \"./ResponderTouchHistoryStore\";\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\n\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = normalizeIdentifier(domEventChangedTouches && domEventChangedTouches[0].identifier || 0);\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === \"function\" ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp: timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === \"mouseup\" || domEventType === \"dragstart\" ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  };\n\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}\n;","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\react-native-web\\dist\\modules\\useResponderEvents\\createResponderEvent.js"],"names":["getBoundingClientRect","ResponderTouchHistoryStore","emptyFunction","emptyObject","emptyArray","normalizeIdentifier","identifier","createResponderEvent","domEvent","rect","propagationWasStopped","changedTouches","touches","domEventChangedTouches","domEventType","type","metaKey","shiftKey","force","clientX","clientY","pageX","pageY","preventDefault","bind","timestamp","timeStamp","normalizeTouches","Array","prototype","slice","call","map","touch","locationX","locationY","target","emulatedTouches","responderEvent","bubbles","cancelable","currentTarget","defaultPrevented","dispatchConfig","eventPhase","isDefaultPrevented","isPropagationStopped","isTrusted","nativeEvent","altKey","ctrlKey","persist","stopPropagation","touchHistory","x","left","y","top"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\n/**\n * Safari produces very large identifiers that would cause the `touchBank` array\n * length to be so large as to crash the browser, if not normalized like this.\n * In the future the `touchBank` should use an object/map instead.\n */\n\nfunction normalizeIdentifier(identifier) {\n  return identifier > 20 ? identifier % 20 : identifier;\n}\n/**\n * Converts a native DOM event to a ResponderEvent.\n * Mouse events are transformed into fake touch events.\n */\n\n\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = normalizeIdentifier(domEventChangedTouches && domEventChangedTouches[0].identifier || 0);\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === 'function' ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      return {\n        force: touch.force,\n        identifier: normalizeIdentifier(touch.identifier),\n\n        get locationX() {\n          return locationX(touch.clientX);\n        },\n\n        get locationY() {\n          return locationY(touch.clientY);\n        },\n\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        target: touch.target,\n        timestamp: timestamp\n      };\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    // `currentTarget` is set before dispatch\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX(clientX);\n      },\n\n      get locationY() {\n        return locationY(clientY);\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  }; // Using getters and functions serves two purposes:\n  // 1) The value of `currentTarget` is not initially available.\n  // 2) Measuring the clientRect may cause layout jank and should only be done on-demand.\n\n  function locationX(x) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return x - rect.left;\n    }\n  }\n\n  function locationY(y) {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return y - rect.top;\n    }\n  }\n\n  return responderEvent;\n}"]},"metadata":{},"sourceType":"module"}