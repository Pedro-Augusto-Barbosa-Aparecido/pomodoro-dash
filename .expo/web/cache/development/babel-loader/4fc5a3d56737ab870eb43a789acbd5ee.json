{"ast":null,"code":"import _object_without_properties from \"@swc/helpers/src/_object_without_properties.mjs\";\nimport merge from \"lodash.merge\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var usePlatformProps = function usePlatformProps(props) {\n  var _web = props._web,\n      _ios = props._ios,\n      _android = props._android,\n      remainingProps = _object_without_properties(props, [\"_web\", \"_ios\", \"_android\"]);\n\n  var platformProps = function platformProps() {\n    switch (Platform.OS) {\n      case \"web\":\n        return _web;\n\n      case \"ios\":\n        return _ios;\n\n      case \"android\":\n        return _android;\n\n      default:\n        return {};\n    }\n  };\n\n  return merge(remainingProps, platformProps());\n};\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\hooks\\usePlatformProps.js"],"names":["merge","usePlatformProps","props","_web","_ios","_android","remainingProps","platformProps","Platform","OS"],"mappings":"AAAA,OAAA,0BAAA,MAAA,iDAAA;AAAA,OAAOA,KAAP,MAAkB,cAAlB;;AAEA,OAAO,IAAMC,gBAAgB,GAAGC,SAAnBD,gBAAmBC,CAAAA,KAAAA,EAAS;EACvC,IACEC,IAAI,GAIFD,KAAK,CAJPC,IADF;EAAA,IAEEC,IAAI,GAGFF,KAAK,CAHPE,IAFF;EAAA,IAGEC,QAAQ,GAENH,KAAK,CAFPG,QAHF;EAAA,IAIKC,cAAc,GAAA,0BAAA,CACfJ,KADe,EACV,CAJPC,MAIO,EAHPC,MAGO,EAFPC,UAEO,CADU,CAJnB;;EAOA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,GAAM;IAC1B,QAAQC,QAAQ,CAACC,EAAjB;MACE,KAAK,KAAL;QACE,OAAON,IAAP;;MAEF,KAAK,KAAL;QACE,OAAOC,IAAP;;MAEF,KAAK,SAAL;QACE,OAAOC,QAAP;;MAEF;QACE,OAAO,EAAP;IAXJ;EAaA,CAdF;;EAgBA,OAAOL,KAAK,CAACM,cAAD,EAAiBC,aAAa,EAA9B,CAAZ;AACD,CAzBM","sourcesContent":["import merge from 'lodash.merge';\nimport { Platform } from 'react-native';\nexport const usePlatformProps = props => {\n  const {\n    _web,\n    _ios,\n    _android,\n    ...remainingProps\n  } = props;\n\n  const platformProps = () => {\n    switch (Platform.OS) {\n      case 'web':\n        return _web;\n\n      case 'ios':\n        return _ios;\n\n      case 'android':\n        return _android;\n\n      default:\n        return {};\n    }\n  };\n\n  return merge(remainingProps, platformProps());\n};\n//# sourceMappingURL=usePlatformProps.js.map"]},"metadata":{},"sourceType":"module"}