{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMenuTypeahead = exports.useMenuOptionItem = exports.useMenuItem = exports.useMenu = exports.useMenuTrigger = void 0;\n\nvar _focus = require(\"@react-aria/focus\");\n\nvar _utils = require(\"@react-aria/utils\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar useMenuTrigger = function useMenuTrigger(_ref) {\n  var handleOpen = _ref.handleOpen,\n      isOpen = _ref.isOpen;\n  var menuTriggerId = (0, _utils.useId)();\n  return {\n    \"onKeyDownCapture\": function onKeyDownCapture(event) {\n      if ([\" \", \"Enter\", \"ArrowUp\", \"ArrowDown\"].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    \"aria-haspopup\": \"menu\",\n    \"aria-expanded\": isOpen ? true : undefined,\n    \"nativeID\": menuTriggerId\n  };\n};\n\nexports.useMenuTrigger = useMenuTrigger;\n\nvar useMenu = function useMenu() {\n  var focusManager = (0, _focus.useFocusManager)();\n\n  var onKeyDown = function onKeyDown(e) {\n    switch (e.key) {\n      case \"ArrowDown\":\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case \"ArrowUp\":\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown: onKeyDown,\n    accessibilityRole: \"menu\"\n  };\n};\n\nexports.useMenu = useMenu;\n\nvar useMenuItem = function useMenuItem(_ref2) {\n  var textValue = _ref2.textValue,\n      ref = _ref2.ref;\n  return {\n    accessibilityRole: \"menuitem\",\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: function onHoverIn() {\n      if (ref.current && _reactNative.Platform.OS === \"web\") ref.current.focus();\n    }\n  };\n};\n\nexports.useMenuItem = useMenuItem;\n\nvar useMenuOptionItem = function useMenuOptionItem(_ref3) {\n  var isChecked = _ref3.isChecked,\n      type = _ref3.type;\n  return {\n    accessibilityRole: \"menuitem\" + (_reactNative.Platform.OS === \"web\" ? type : \"\"),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\n\nexports.useMenuOptionItem = useMenuOptionItem;\nvar ITEM_ATTR = \"data-nativebase-menu-item\";\n\nvar getValue = function getValue(element) {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : \"\";\n};\n\nvar useMenuTypeahead = function useMenuTypeahead(props) {\n  return {\n    onKeyDown: function onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        var container = event.currentTarget;\n        var values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        var searchKey = event.key;\n        var foundValue = values.find(function (value) {\n          return value.toLowerCase().startsWith(searchKey);\n        });\n        var newItem = container.querySelector(\"[\".concat(ITEM_ATTR, '=\"').concat(foundValue, '\"]'));\n\n        if (newItem) {\n          setTimeout(function () {\n            return newItem.focus();\n          });\n        }\n      }\n    }\n  };\n};\n\nexports.useMenuTypeahead = useMenuTypeahead;","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\commonjs\\components\\composites\\Menu\\useMenu.js"],"names":["Object","defineProperty","exports","value","useMenuTypeahead","useMenuOptionItem","useMenuItem","useMenu","useMenuTrigger","_focus","require","_utils","handleOpen","isOpen","menuTriggerId","useId","event","includes","key","preventDefault","undefined","focusManager","useFocusManager","onKeyDown","e","focusNext","wrap","focusPrevious","accessibilityRole","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","current","_reactNative","Platform","OS","focus","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","element","_element$getAttribute","getAttribute","props","length","ctrlKey","altKey","metaKey","container","currentTarget","values","Array","from","querySelectorAll","concat","map","searchKey","foundValue","find","toLowerCase","startsWith","newItem","querySelector","setTimeout"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMenuTypeahead = exports.useMenuOptionItem = exports.useMenuItem = exports.useMenu = exports.useMenuTrigger = void 0;\n\nvar _focus = require(\"@react-aria/focus\");\n\nvar _utils = require(\"@react-aria/utils\");\n\nvar _reactNative = require(\"react-native\");\n\nconst useMenuTrigger = ({\n  handleOpen,\n  isOpen\n}) => {\n  const menuTriggerId = (0, _utils.useId)();\n  return {\n    'onKeyDownCapture': event => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\n\nexports.useMenuTrigger = useMenuTrigger;\n\nconst useMenu = () => {\n  const focusManager = (0, _focus.useFocusManager)();\n\n  const onKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\n\nexports.useMenu = useMenu;\n\nconst useMenuItem = ({\n  textValue,\n  ref\n}) => {\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: () => {\n      if (ref.current && _reactNative.Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\n\nexports.useMenuItem = useMenuItem;\n\nconst useMenuOptionItem = ({\n  isChecked,\n  type\n}) => {\n  return {\n    accessibilityRole: 'menuitem' + (_reactNative.Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\n\nexports.useMenuOptionItem = useMenuOptionItem;\nconst ITEM_ATTR = 'data-nativebase-menu-item';\n\nconst getValue = element => {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : '';\n};\n\nconst useMenuTypeahead = props => {\n  return {\n    onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        const container = event.currentTarget;\n        const values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        const searchKey = event.key;\n        const foundValue = values.find(value => value.toLowerCase().startsWith(searchKey));\n        const newItem = container.querySelector(\"[\".concat(ITEM_ATTR, \"=\\\"\").concat(foundValue, \"\\\"]\"));\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => newItem.focus());\n        }\n      }\n    }\n\n  };\n};\n\nexports.useMenuTypeahead = useMenuTypeahead;\n//# sourceMappingURL=useMenu.js.map"]},"metadata":{},"sourceType":"script"}