{"ast":null,"code":"import _sliced_to_array from \"@swc/helpers/src/_sliced_to_array.mjs\";\n\nvar _s = $RefreshSig$();\n\nimport Color from \"tinycolor2\";\nimport { useToken } from \"./useToken\";\nimport { useAccessibleColors } from \"../core/color-mode/hooks\";\nimport { useNativeBaseConfig } from \"../core/NativeBaseContext\";\nexport function useContrastText(bg, color) {\n  _s();\n\n  var ref = _sliced_to_array(useToken(\"colors\", [\"contrastThreshold\", \"darkText\", \"lightText\", bg, color !== null && color !== void 0 ? color : \"\"]), 5),\n      contrastThreshold = ref[0],\n      trueDarkText = ref[1],\n      trueLightText = ref[2],\n      trueBg = ref[3],\n      trueColor = ref[4];\n\n  var suppressColorAccessibilityWarning = useNativeBaseConfig(\"NativeBaseConfigProvider\").config.suppressColorAccessibilityWarning;\n\n  var ref1 = _sliced_to_array(useAccessibleColors(), 1),\n      accessibleColors = ref1[0];\n\n  if (useNativeBaseConfig(\"NativeBaseConfigProvider\").disableContrastText) {\n    return trueColor;\n  }\n\n  if (typeof bg !== \"string\") {\n    return;\n  }\n\n  var ref2 = _sliced_to_array(bg.split(\".\"), 2),\n      bgThemeColorVariant = ref2[0],\n      bgShade = ref2[1];\n\n  var textColor = !accessibleColors && bgThemeColorVariant && themeColorsThresholdShades[bgThemeColorVariant] ? getContrastThemeColor(bgThemeColorVariant, bgShade) : getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning);\n  return textColor;\n}\n\n_s(useContrastText, \"TYFjxyEmXcdwnxicakZOkatNVUg=\", false, function () {\n  return [useToken, useNativeBaseConfig, useAccessibleColors, useNativeBaseConfig];\n});\n\nfunction getContrastThemeColor(bgThemeColorVariant, bgShade) {\n  var shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n\n  if (bgShade && shadeThreshold && (bgShade >= shadeThreshold && bgThemeColorVariant !== \"dark\" || bgThemeColorVariant === \"dark\" && bgShade < shadeThreshold)) {\n    return \"lightText\";\n  }\n\n  return \"darkText\";\n}\n\nfunction getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning) {\n  if (typeof trueBg !== \"string\") {\n    trueBg = bg;\n  }\n\n  var trueContrastColor;\n  var contrastColorToken;\n  var darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  var lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (darkTextConstrast >= contrastThreshold || darkTextConstrast > lightTextConstrast) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = \"darkText\";\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = \"lightText\";\n  }\n\n  if (\"development\" !== \"production\") {\n    var contrast = getContrastRatio(trueBg, trueColor ? trueColor : trueContrastColor);\n\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn([\"NativeBase: The contrast ratio of \".concat(contrast, \":1 for \").concat(color ? color : contrastColorToken, \" on \").concat(bg), \"falls below the WCAG recommended absolute minimum contrast ratio of 3:1.\", \"https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast\"].join(\"\\n\"));\n    }\n  }\n\n  return contrastColorToken;\n}\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = Color(foreground).getLuminance();\n  var lumB = Color(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nvar themeColorsThresholdShades = {\n  rose: 500,\n  pink: 500,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  tertiary: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 500,\n  orange: 500,\n  red: 500,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 500,\n  error: 500,\n  success: 400,\n  warning: 500,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500\n};\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\hooks\\useContrastText.js"],"names":["Color","useToken","useAccessibleColors","useNativeBaseConfig","useContrastText","bg","color","contrastThreshold","trueDarkText","trueLightText","trueBg","trueColor","suppressColorAccessibilityWarning","config","accessibleColors","disableContrastText","bgThemeColorVariant","bgShade","split","textColor","themeColorsThresholdShades","getContrastThemeColor","getAccessibleContrastColor","shadeThreshold","trueContrastColor","contrastColorToken","darkTextConstrast","getContrastRatio","lightTextConstrast","contrast","console","warn","concat","join","foreground","background","lumA","getLuminance","lumB","Math","max","min","rose","pink","fuchsia","purple","violet","indigo","blue","lightBlue","cyan","teal","emerald","tertiary","green","lime","yellow","amber","orange","red","warmGray","trueGray","gray","coolGray","blueGray","dark","danger","error","success","warning","muted","primary","info","secondary","light"],"mappings":"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","sourcesContent":["import Color from 'tinycolor2';\nimport { useToken } from './useToken';\nimport { useAccessibleColors } from '../core/color-mode/hooks';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nexport function useContrastText(bg, color) {\n  const [contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor] = useToken('colors', ['contrastThreshold', 'darkText', 'lightText', bg, color !== null && color !== void 0 ? color : '']);\n  const suppressColorAccessibilityWarning = useNativeBaseConfig('NativeBaseConfigProvider').config.suppressColorAccessibilityWarning;\n  const [accessibleColors] = useAccessibleColors();\n\n  if (useNativeBaseConfig('NativeBaseConfigProvider').disableContrastText) {\n    return trueColor;\n  }\n\n  if (typeof bg !== 'string') {\n    return;\n  }\n\n  const [bgThemeColorVariant, bgShade] = bg.split('.');\n  const textColor = !accessibleColors && bgThemeColorVariant && themeColorsThresholdShades[bgThemeColorVariant] ? getContrastThemeColor(bgThemeColorVariant, bgShade) : getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning);\n  return textColor;\n}\n\nfunction getContrastThemeColor(bgThemeColorVariant, bgShade) {\n  const shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n\n  if (bgShade && shadeThreshold && (bgShade >= shadeThreshold && bgThemeColorVariant !== 'dark' || bgThemeColorVariant === 'dark' && bgShade < shadeThreshold)) {\n    return 'lightText';\n  }\n\n  return 'darkText';\n}\n\nfunction getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning) {\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n\n  let trueContrastColor;\n  let contrastColorToken;\n  const darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  const lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (darkTextConstrast >= contrastThreshold || darkTextConstrast > lightTextConstrast) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const contrast = getContrastRatio(trueBg, trueColor ? trueColor : trueContrastColor);\n\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn([\"NativeBase: The contrast ratio of \".concat(contrast, \":1 for \").concat(color ? color : contrastColorToken, \" on \").concat(bg), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n    }\n  }\n\n  return contrastColorToken;\n}\n\nfunction getContrastRatio(foreground, background) {\n  const lumA = Color(foreground).getLuminance();\n  const lumB = Color(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nconst themeColorsThresholdShades = {\n  rose: 500,\n  pink: 500,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  tertiary: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 500,\n  orange: 500,\n  red: 500,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 500,\n  error: 500,\n  success: 400,\n  warning: 500,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500\n};\n//# sourceMappingURL=useContrastText.js.map"]},"metadata":{},"sourceType":"module"}