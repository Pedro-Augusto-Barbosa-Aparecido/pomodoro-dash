{"ast":null,"code":"import _sliced_to_array from \"@swc/helpers/src/_sliced_to_array.mjs\";\n\nvar _s = $RefreshSig$();\n\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React from \"react\";\nexport var getResponsiveStylesImpl = function getResponsiveStylesImpl(width) {\n  return function (queries) {\n    if (typeof width === \"number\") {\n      var styles = queries.initial ? [StyleSheet.create({\n        initial: StyleSheet.flatten(queries.initial)\n      }).initial] : [];\n\n      if (queries.query) {\n        queries.query.forEach(function (queryRule) {\n          if (queryRule.style) {\n            var flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n            if (typeof queryRule.maxWidth === \"number\" && typeof queryRule.minWidth === \"number\") {\n              if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  rangeStyle: flattenQueryStyle\n                }).rangeStyle);\n              }\n            } else if (typeof queryRule.minWidth === \"number\") {\n              if (width >= queryRule.minWidth) {\n                styles.push(StyleSheet.create({\n                  minWidthStyle: flattenQueryStyle\n                }).minWidthStyle);\n              }\n            } else if (typeof queryRule.maxWidth === \"number\") {\n              if (width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  maxWidthStyle: flattenQueryStyle\n                }).maxWidthStyle);\n              }\n            }\n          }\n        });\n        return {\n          styles: styles\n        };\n      }\n    }\n\n    return {};\n  };\n};\nexport var useDimensionsWithEnable = function useDimensionsWithEnable(param) {\n  var enable = param.enable;\n\n  _s();\n\n  var ref = _sliced_to_array(React.useState(function () {\n    return Dimensions.get(\"window\");\n  }), 2),\n      dimensions = ref[0],\n      setDimensions = ref[1];\n\n  React.useEffect(function () {\n    if (enable) {\n      var handleChange = function handleChange(param) {\n        var window = param.window;\n\n        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n          setDimensions(window);\n        }\n      };\n\n      Dimensions.addEventListener(\"change\", handleChange);\n      handleChange({\n        window: Dimensions.get(\"window\")\n      });\n      return function () {\n        Dimensions.removeEventListener(\"change\", handleChange);\n      };\n    }\n\n    return function () {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n\n_s(useDimensionsWithEnable, \"ba0M5RfDBUqYbZCK7vWCEzwQ6vk=\");\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\utils\\useResponsiveQuery\\common.js"],"names":["React","getResponsiveStylesImpl","width","queries","styles","initial","StyleSheet","create","flatten","query","forEach","queryRule","style","flattenQueryStyle","maxWidth","minWidth","push","rangeStyle","minWidthStyle","maxWidthStyle","useDimensionsWithEnable","enable","dimensions","setDimensions","useState","Dimensions","get","useEffect","handleChange","window","height","scale","fontScale","addEventListener","removeEventListener"],"mappings":"AAAA,OAAA,gBAAA,MAAA,uCAAA;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAMC,uBAAuB,GAAGC,SAA1BD,uBAA0BC,CAAAA,KAAAA,EAAK;SAAIC,UAAAA,OAAAA,EAAW;IACzD,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;MAC7B,IAAIE,MAAM,GAAGD,OAAO,CAACE,OAARF,GAAkB,CAACG,UAAU,CAACC,MAAXD,CAAkB;QAChDD,OAAO,EAAEC,UAAU,CAACE,OAAXF,CAAmBH,OAAO,CAACE,OAA3BC;MADuC,CAAlBA,EAE7BD,OAF4B,CAAlBF,GAEC,EAFd;;MAIA,IAAIA,OAAO,CAACM,KAAZ,EAAmB;QACjBN,OAAO,CAACM,KAARN,CAAcO,OAAdP,CAAsBQ,UAAAA,SAAAA,EAAa;UACjC,IAAIA,SAAS,CAACC,KAAd,EAAqB;YACnB,IAAMC,iBAAiB,GAAGP,UAAU,CAACE,OAAXF,CAAmBK,SAAS,CAACC,KAA7BN,CAA1B;;YAEA,IAAI,OAAOK,SAAS,CAACG,QAAjB,KAA8B,QAA9B,IAA0C,OAAOH,SAAS,CAACI,QAAjB,KAA8B,QAA5E,EAAsF;cACpF,IAAIb,KAAK,IAAIS,SAAS,CAACI,QAAnBb,IAA+BA,KAAK,IAAIS,SAAS,CAACG,QAAtD,EAAgE;gBAC9DV,MAAM,CAACY,IAAPZ,CAAYE,UAAU,CAACC,MAAXD,CAAkB;kBAC5BW,UAAU,EAAEJ;gBADgB,CAAlBP,EAETW,UAFHb;cAGD;YACF,CAND,MAMO,IAAI,OAAOO,SAAS,CAACI,QAAjB,KAA8B,QAAlC,EAA4C;cACjD,IAAIb,KAAK,IAAIS,SAAS,CAACI,QAAvB,EAAiC;gBAC/BX,MAAM,CAACY,IAAPZ,CAAYE,UAAU,CAACC,MAAXD,CAAkB;kBAC5BY,aAAa,EAAEL;gBADa,CAAlBP,EAETY,aAFHd;cAGD;YACF,CANM,MAMA,IAAI,OAAOO,SAAS,CAACG,QAAjB,KAA8B,QAAlC,EAA4C;cACjD,IAAIZ,KAAK,IAAIS,SAAS,CAACG,QAAvB,EAAiC;gBAC/BV,MAAM,CAACY,IAAPZ,CAAYE,UAAU,CAACC,MAAXD,CAAkB;kBAC5Ba,aAAa,EAAEN;gBADa,CAAlBP,EAETa,aAFHf;cAGD;YACF;UACF;QACF,CAxBDD;QAyBA,OAAO;UACLC,MAAM,EAANA;QADK,CAAP;MAGD;IACF;;IAED,OAAO,EAAP;EACD,C;AAAA,CAvCM;AAyCP,OAAO,IAAMgB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,KAAA,EAEjC;MADJC,MAAM,GAAA,KAAA,CAANA,M;;;;EAEA,IAAoCrB,GAA8C,GAAA,gBAAA,CAA9CA,KAAK,CAACwB,QAANxB,CAAe,YAAA;WAAMyB,UAAU,CAACC,GAAXD,CAAe,QAAfA,C;EAAwB,CAA7CzB,CAA8C,EAAA,CAAA,CAAlF;EAAA,IAAOsB,UAAU,GAAmBtB,GAA8C,CAAjE,CAAiE,CAAlF;EAAA,IAAmBuB,aAAa,GAAIvB,GAA8C,CAAlD,CAAkD,CAAlF;;EACAA,KAAK,CAAC2B,SAAN3B,CAAgB,YAAM;IACpB,IAAIqB,MAAJ,EAAY;UACDO,YAAY,GAArB,SAASA,YAAT,CAAsB,KAAtB,EAEG;YADDC,MAAM,GADc,KAErB,CADCA,M;;QAEA,IAAIP,UAAU,CAACpB,KAAXoB,KAAqBO,MAAM,CAAC3B,KAA5BoB,IAAqCA,UAAU,CAACQ,MAAXR,KAAsBO,MAAM,CAACC,MAAlER,IAA4EA,UAAU,CAACS,KAAXT,KAAqBO,MAAM,CAACE,KAAxGT,IAAiHA,UAAU,CAACU,SAAXV,KAAyBO,MAAM,CAACG,SAArJ,EAAgK;UAC9JT,aAAa,CAACM,MAAD,CAAbN;QACD;MACF,C;;MAEDE,UAAU,CAACQ,gBAAXR,CAA4B,QAA5BA,EAAsCG,YAAtCH;MAIAG,YAAY,CAAC;QACXC,MAAM,EAAEJ,UAAU,CAACC,GAAXD,CAAe,QAAfA;MADG,CAAD,CAAZG;MAGA,OAAO,YAAM;QACXH,UAAU,CAACS,mBAAXT,CAA+B,QAA/BA,EAAyCG,YAAzCH;MACD,CAFD;IAGD;;IAED,OAAO,YAAM,CAAE,CAAf;EACD,CAvBDzB,EAuBG,CAACsB,UAAD,EAAaD,MAAb,CAvBHrB;EAwBA,OAAOsB,UAAP;AACD,CA7BM;;GAAMF,uB,EAAuB,8B","sourcesContent":["import { Dimensions, StyleSheet } from 'react-native';\nimport React from 'react';\nexport const getResponsiveStylesImpl = width => queries => {\n  if (typeof width === 'number') {\n    let styles = queries.initial ? [StyleSheet.create({\n      initial: StyleSheet.flatten(queries.initial)\n    }).initial] : [];\n\n    if (queries.query) {\n      queries.query.forEach(queryRule => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (typeof queryRule.maxWidth === 'number' && typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(StyleSheet.create({\n                rangeStyle: flattenQueryStyle\n              }).rangeStyle);\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(StyleSheet.create({\n                minWidthStyle: flattenQueryStyle\n              }).minWidthStyle);\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(StyleSheet.create({\n                maxWidthStyle: flattenQueryStyle\n              }).maxWidthStyle);\n            }\n          }\n        }\n      });\n      return {\n        styles\n      };\n    }\n  }\n\n  return {};\n}; // The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\n\nexport const useDimensionsWithEnable = ({\n  enable\n}) => {\n  const [dimensions, setDimensions] = React.useState(() => Dimensions.get('window'));\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange({\n        window\n      }) {\n        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n          setDimensions(window);\n        }\n      }\n\n      Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n\n      handleChange({\n        window: Dimensions.get('window')\n      });\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"module"}