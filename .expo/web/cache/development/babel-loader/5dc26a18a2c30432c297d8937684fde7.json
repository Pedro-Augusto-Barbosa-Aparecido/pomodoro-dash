{"ast":null,"code":"import _async_to_generator from \"@swc/helpers/src/_async_to_generator.mjs\";\nimport regeneratorRuntime from \"D:\\\\codes\\\\Next\\\\pomodoro-dash\\\\node_modules\\\\next\\\\dist\\\\compiled\\\\regenerator-runtime\\\\runtime.js\";\n\nvar _s = $RefreshSig$(),\n    _s1 = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nexport var useColorMode = function useColorMode() {\n  _s();\n\n  var ref = React.useContext(HybridContext),\n      colorModeContext = ref.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error(\"useColorMode must be used within a NativeBaseProvider\");\n  }\n\n  return colorModeContext;\n};\n\n_s(useColorMode, \"ijWpSq89Dk+m1T0EDxx+oj16Etk=\");\n\nexport function useColorModeValue(light, dark) {\n  _s1();\n\n  var colorMode = useColorMode().colorMode;\n  return colorMode === \"dark\" ? dark : light;\n}\n\n_s1(useColorModeValue, \"2FlznkK71qNOMfMHVcz5TMepWEE=\", false, function () {\n  return [useColorMode];\n});\n\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  _s2();\n\n  var systemColorMode = Appearance.getColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var ref = useState(initialColorMode),\n      colorMode = ref[0],\n      setRawMode = ref[1];\n  var setColorMode = React.useCallback(function () {\n    var _ref = _async_to_generator(regeneratorRuntime.mark(function _callee(val) {\n      return regeneratorRuntime.wrap(function _callee$(_ctx) {\n        while (1) {\n          switch (_ctx.prev = _ctx.next) {\n            case 0:\n              if (!colorModeManager) {\n                _ctx.next = 3;\n                break;\n              }\n\n              _ctx.next = 3;\n              return colorModeManager.set(val);\n\n            case 3:\n              setRawMode(val);\n\n            case 4:\n            case \"end\":\n              return _ctx.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (val) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [colorModeManager]);\n  useEffect(function () {\n    if (colorModeManager) {\n      (function () {\n        var _getMode = _async_to_generator(regeneratorRuntime.mark(function _callee() {\n          var value;\n          return regeneratorRuntime.wrap(function _callee$(_ctx) {\n            while (1) {\n              switch (_ctx.prev = _ctx.next) {\n                case 0:\n                  _ctx.next = 2;\n                  return colorModeManager.get(initialColorMode);\n\n                case 2:\n                  value = _ctx.sent;\n\n                  if (value && value !== colorMode) {\n                    setRawMode(value);\n                  }\n\n                case 4:\n                case \"end\":\n                  return _ctx.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function getMode() {\n          return _getMode.apply(this, arguments);\n        }\n\n        return getMode;\n      })()();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\n\n_s2(useModeManager, \"11+zBdeafo3p997UrwvGc5S6M2o=\");\n\nexport function useAccessibleColors() {\n  _s3();\n\n  var ref = React.useContext(HybridContext),\n      colorModeContext = ref.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}\n\n_s3(useAccessibleColors, \"ijWpSq89Dk+m1T0EDxx+oj16Etk=\");\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\core\\color-mode\\hooks.js"],"names":["React","useState","useEffect","HybridContext","useColorMode","colorMode","colorModeContext","useContext","undefined","Error","useColorModeValue","light","dark","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","Appearance","getColorScheme","setRawMode","setColorMode","useCallback","val","set","getMode","value","get","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport { Appearance } from 'react-native';\nexport const useColorMode = () => {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  const systemColorMode = Appearance.getColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState(initialColorMode);\n  const setColorMode = React.useCallback(async val => {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n\n    setRawMode(val);\n  }, [colorModeManager]); // For initial setting initial color mode from storage\n\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode,\n    setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n\n  const toggleAccessibleColors = () => colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}\n//# sourceMappingURL=hooks.js.map"]},"metadata":{},"sourceType":"module"}