{"ast":null,"code":"import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport * as stateChangeTypes from \"./types\";\nimport { getDefaultValue } from \"./utils\";\nexport function useTypeaheadReducer(state, action) {\n  var type = action.type,\n      props = action.props;\n  var changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, \"isOpen\"),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false\n        };\n      }\n\n      break;\n\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, \"isOpen\"),\n        selectedItem: getDefaultValue(props, \"selectedItem\"),\n        inputValue: getDefaultValue(props, \"inputValue\")\n      };\n      break;\n\n    default:\n      throw new Error(\"Reducer called without proper action type.\");\n  }\n\n  return _object_spread({}, state, changes);\n}\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\components\\composites\\Typeahead\\useTypeahead\\reducer.js"],"names":["stateChangeTypes","getDefaultValue","useTypeaheadReducer","state","action","type","props","changes","ItemClick","isOpen","selectedItem","items","index","inputValue","itemToString","InputBlur","InputChange","ToggleButtonClick","FunctionToggleMenu","FunctionOpenMenu","FunctionCloseMenu","FunctionSelectItem","ControlledPropUpdatedSelectedItem","FunctionSetInputValue","FunctionReset","Error"],"mappings":"AAAA,OAAA,cAAA,MAAA,qCAAA;AAAA,OAAA,KAAYA,gBAAZ,MAAkC,SAAlC;AACA,SAASC,eAAT,QAAgC,SAAhC;AACA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoCC,MAApC,EAA4C;EACjD,IACEC,IAAI,GAEFD,MAAM,CAFRC,IADF;EAAA,IAEEC,KAAK,GACHF,MAAM,CADRE,KAFF;EAIA,IAAIC,OAAJ;;EAEA,QAAQF,IAAR;IACE,KAAKL,gBAAgB,CAACQ,SAAtB;MACED,OAAO,GAAG;QACRE,MAAM,EAAER,eAAe,CAACK,KAAD,EAAQ,QAAR,CADf;QAERI,YAAY,EAAEJ,KAAK,CAACK,KAANL,CAAYF,MAAM,CAACQ,KAAnBN,CAFN;QAGRO,UAAU,EAAEP,KAAK,CAACQ,YAANR,CAAmBA,KAAK,CAACK,KAANL,CAAYF,MAAM,CAACQ,KAAnBN,CAAnBA;MAHJ,CAAVC;MAKA;;IAEF,KAAKP,gBAAgB,CAACe,SAAtB;MACE,IAAIZ,KAAK,CAACM,MAAV,EAAkB;QAChBF,OAAO,GAAG;UACRE,MAAM,EAAE;QADA,CAAVF;MAGD;;MAED;;IAEF,KAAKP,gBAAgB,CAACgB,WAAtB;MACET,OAAO,GAAG;QACRE,MAAM,EAAE,IADA;QAERI,UAAU,EAAET,MAAM,CAACS;MAFX,CAAVN;MAIA;;IAEF,KAAKP,gBAAgB,CAACiB,iBAAtB;IACA,KAAKjB,gBAAgB,CAACkB,kBAAtB;MACEX,OAAO,GAAG;QACRE,MAAM,EAAE,CAACN,KAAK,CAACM;MADP,CAAVF;MAGA;;IAEF,KAAKP,gBAAgB,CAACmB,gBAAtB;MACEZ,OAAO,GAAG;QACRE,MAAM,EAAE;MADA,CAAVF;MAGA;;IAEF,KAAKP,gBAAgB,CAACoB,iBAAtB;MACEb,OAAO,GAAG;QACRE,MAAM,EAAE;MADA,CAAVF;MAGA;;IAEF,KAAKP,gBAAgB,CAACqB,kBAAtB;MACEd,OAAO,GAAG;QACRG,YAAY,EAAEN,MAAM,CAACM,YADb;QAERG,UAAU,EAAEP,KAAK,CAACQ,YAANR,CAAmBF,MAAM,CAACM,YAA1BJ;MAFJ,CAAVC;MAIA;;IAEF,KAAKP,gBAAgB,CAACsB,iCAAtB;IACA,KAAKtB,gBAAgB,CAACuB,qBAAtB;MACEhB,OAAO,GAAG;QACRM,UAAU,EAAET,MAAM,CAACS;MADX,CAAVN;MAGA;;IAEF,KAAKP,gBAAgB,CAACwB,aAAtB;MACEjB,OAAO,GAAG;QACRE,MAAM,EAAER,eAAe,CAACK,KAAD,EAAQ,QAAR,CADf;QAERI,YAAY,EAAET,eAAe,CAACK,KAAD,EAAQ,cAAR,CAFrB;QAGRO,UAAU,EAAEZ,eAAe,CAACK,KAAD,EAAQ,YAAR;MAHnB,CAAVC;MAKA;;IAEF;MACE,MAAM,IAAIkB,KAAJ,CAAU,4CAAV,CAAN;EAnEJ;;EAsEA,OAAO,cAAA,CAAA,EAAA,EAAKtB,KAAL,EACFI,OADE,CAAP;AAGD","sourcesContent":["import * as stateChangeTypes from './types';\nimport { getDefaultValue } from './utils';\nexport function useTypeaheadReducer(state, action) {\n  const {\n    type,\n    props\n  } = action;\n  let changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false\n        };\n      }\n\n      break;\n\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return { ...state,\n    ...changes\n  };\n}\n//# sourceMappingURL=reducer.js.map"]},"metadata":{},"sourceType":"module"}