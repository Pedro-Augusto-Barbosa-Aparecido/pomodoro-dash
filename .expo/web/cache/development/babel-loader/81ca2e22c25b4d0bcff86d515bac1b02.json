{"ast":null,"code":"import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useTheme } from \"../hooks/useTheme\";\nimport { useNativeBaseConfig } from \"../core/NativeBaseContext\";\nimport { isResponsiveAnyProp } from \"../theme/tools\";\nexport function useResponsiveSSRProps(incomingProps) {\n  _s();\n\n  var ref = useState(false),\n      modified = ref[0],\n      setModified = ref[1];\n  var theme = useTheme();\n  var responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  var isSSR = useNativeBaseConfig(\"useBreakpointResolvedProps\").isSSR;\n  var modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = _object_spread_props(_object_spread({}, modifiedProps), {\n      key: Math.random()\n    });\n  }\n\n  useEffect(function () {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}\n\n_s(useResponsiveSSRProps, \"Kw/cAk4RAmS4LYIKxT5ZS7ff0VE=\", false, function () {\n  return [useTheme, useNativeBaseConfig];\n});\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\hooks\\useResponsiveSSRProps.js"],"names":["useEffect","useState","useTheme","useNativeBaseConfig","isResponsiveAnyProp","useResponsiveSSRProps","incomingProps","modified","setModified","theme","responsivePropsExists","isSSR","modifiedProps","key","Math","random"],"mappings":"AAAA,OAAA,cAAA,MAAA,qCAAA;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,OAAO,SAASC,qBAAT,CAA+BC,aAA/B,EAA8C;;;EACnD,IAAgCL,GAAe,GAAfA,QAAQ,CAAC,KAAD,CAAxC;EAAA,IAAOM,QAAQ,GAAiBN,GAAe,CAAhC,CAAgC,CAA/C;EAAA,IAAiBO,WAAW,GAAIP,GAAe,CAAnB,CAAmB,CAA/C;EACA,IAAMQ,KAAK,GAAGP,QAAQ,EAAtB;EACA,IAAMQ,qBAAqB,GAAGN,mBAAmB,CAACE,aAAD,EAAgBG,KAAhB,CAAjD;EACA,IAAME,KAAK,GAAGR,mBAAmB,CAAC,4BAAD,CAAnBA,CAAkDQ,KAAhE;EACA,IAAIC,aAAa,GAAGN,aAApB;;EAEA,IAAII,qBAAqB,IAAIC,KAAzBD,IAAkC,CAACH,QAAvC,EAAiD;IAC/CK,aAAa,GAAG,oBAAA,CAAA,cAAA,CAAA,EAAA,EAAKA,aAAL,CAAA,EAAkB;MAChCC,GAAG,EAAEC,IAAI,CAACC,MAALD;IAD2B,CAAlB,CAAhBF;EAGD;;EAEDZ,SAAS,CAAC,YAAM;IACd,IAAIU,qBAAqB,IAAIC,KAA7B,EAAoC;MAClCH,WAAW,CAAC,IAAD,CAAXA;IACD;EACF,CAJQ,EAIN,CAACE,qBAAD,EAAwBC,KAAxB,CAJM,CAATX;EAKA,OAAOY,aAAP;AACD;;GAnBeP,qB,EAAqB,8B,EAAA,K,EAAA,YAAA;UAErBH,Q,EAEAC,mB","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\nexport function useResponsiveSSRProps(incomingProps) {\n  const [modified, setModified] = useState(false);\n  const theme = useTheme();\n  const responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  let modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = { ...modifiedProps,\n      key: Math.random()\n    };\n  }\n\n  useEffect(() => {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}\n//# sourceMappingURL=useResponsiveSSRProps.js.map"]},"metadata":{},"sourceType":"module"}