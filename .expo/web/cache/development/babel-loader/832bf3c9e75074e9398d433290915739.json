{"ast":null,"code":"import invariant from \"fbjs/lib/invariant\";\nimport requestIdleCallback, { cancelIdleCallback } from \"../../modules/requestIdleCallback\";\nvar InteractionManager = {\n  Events: {\n    interactionStart: \"interactionStart\",\n    interactionComplete: \"interactionComplete\"\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, \"Must provide a handle to clear.\");\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\react-native-web\\dist\\exports\\InteractionManager\\index.js"],"names":["invariant","requestIdleCallback","cancelIdleCallback","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","handle","promise","Promise","resolve","then","bind","done","cancel","createInteractionHandle","clearInteractionHandle","addListener"],"mappings":"AASA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,mBAAP,IAA8BC,kBAA9B,QAAwD,mCAAxD;AACA,IAAIC,kBAAkB,GAAG;EACvBC,MAAM,EAAE;IACNC,gBAAgB,EAAE,kBADZ;IAENC,mBAAmB,EAAE;EAFf,CADe;EASvBC,oBAAoB,EAAE,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;IACxD,IAAIC,MAAJ;IACA,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;MAC3CH,MAAM,GAAGR,mBAAmB,CAAC,YAAY;QACvC,IAAIO,IAAJ,EAAU;UACRI,OAAO,CAACJ,IAAI,EAAL,CAAPI;QACD,CAFD,MAEO;UACLA,OAAO;QACR;MACF,CAN2B,CAA5BH;IAOD,CARa,CAAd;IASA,OAAO;MACLI,IAAI,EAAEH,OAAO,CAACG,IAARH,CAAaI,IAAbJ,CAAkBA,OAAlBA,CADD;MAELK,IAAI,EAAEL,OAAO,CAACG,IAARH,CAAaI,IAAbJ,CAAkBA,OAAlBA,CAFD;MAGLM,MAAM,EAAE,SAASA,MAAT,GAAkB;QACxBd,kBAAkB,CAACO,MAAD,CAAlBP;MACD;IALI,CAAP;EAOD,CA3BsB;EAgCvBe,uBAAuB,EAAE,SAASA,uBAAT,GAAmC;IAC1D,OAAO,CAAP;EACD,CAlCsB;EAuCvBC,sBAAsB,EAAE,SAASA,sBAAT,CAAgCT,MAAhC,EAAwC;IAC9DT,SAAS,CAAC,CAAC,CAACS,MAAH,EAAW,iCAAX,CAATT;EACD,CAzCsB;EA0CvBmB,WAAW,EAAE,SAASA,WAAT,GAAuB,CAAE;AA1Cf,CAAzB;AA4CA,eAAehB,kBAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = requestIdleCallback(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nexport default InteractionManager;"]},"metadata":{},"sourceType":"module"}