{"ast":null,"code":"import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\nimport _sliced_to_array from \"@swc/helpers/src/_sliced_to_array.mjs\";\nimport _throw from \"@swc/helpers/src/_throw.mjs\";\nimport get from \"lodash.get\";\nimport isNil from \"lodash.isnil\";\nimport mergeWith from \"lodash.mergewith\";\nimport cloneDeep from \"lodash.clonedeep\";\nimport { themePropertyMap } from \"./../../theme/base\";\nimport { getClosestBreakpoint, findLastValidBreakpoint, hasValidBreakpointFormat, extractInObject } from \"./../../theme/tools\";\nimport { useContrastText } from \"../useContrastText\";\nexport function extractProps(props, theme, param, componentTheme, currentBreakpoint) {\n  var param = param !== null ? param : _throw(new TypeError(\"Cannot destructure undefined\"));\n  var newProps = {};\n\n  for (var property in props) {\n    if (themePropertyMap[property]) {\n      var propValues = extractPropertyFromFunction(property, props, theme, componentTheme);\n\n      if (typeof propValues === \"string\" || typeof propValues === \"number\") {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (var nestedProp in propValues) {\n          newProps[nestedProp] = get(theme, \"\".concat(themePropertyMap[nestedProp], \".\").concat(propValues[nestedProp]), propValues[nestedProp]);\n        }\n      } else if (property === \"shadow\") {\n        var shadowProps = theme[themePropertyMap[property]][props[property]];\n\n        if (!isNil(shadowProps)) {\n          newProps = _object_spread({}, newProps, shadowProps);\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n    }\n  }\n\n  return cloneDeep(newProps);\n}\n\nfunction filterDefaultProps(props, defaultProps) {\n  var ref = _sliced_to_array(extractInObject(defaultProps, Object.keys(props)), 2),\n      resultProps = ref[1];\n\n  return resultProps;\n}\n\nexport var extractPropertyFromFunction = function extractPropertyFromFunction(property, props, theme, componentTheme) {\n  var propValues;\n\n  if (componentTheme && typeof componentTheme[themePropertyMap[property]] === \"function\") {\n    var funcProps = componentTheme[themePropertyMap[property]](_object_spread({\n      theme: theme\n    }, props));\n    var isNested = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === \"object\";\n    });\n    propValues = isNested ? _object_spread({}, get(funcProps, \"\".concat(props[property]))) : _object_spread({}, funcProps);\n  } else {\n    propValues = get(componentTheme, \"\".concat(themePropertyMap[property], \".\").concat(props[property]));\n  }\n\n  return propValues;\n};\nexport function mergeUnderscoreProps(newProps, props) {\n  var _s = $RefreshSig$();\n\n  var _props = Object.keys(newProps).filter(function (propName) {\n    return propName.startsWith(\"_\");\n  });\n\n  _props.forEach(_s(function (propName) {\n    _s();\n\n    var _newProps$bg, _newProps$propName$co, _newProps$propName, _props$propName;\n\n    var bg = (_newProps$bg = newProps.bg) !== null && _newProps$bg !== void 0 ? _newProps$bg : newProps.backgroundColor;\n    var textColor = bg ? {\n      color: useContrastText(bg, (_newProps$propName$co = (_newProps$propName = newProps[propName]) === null || _newProps$propName === void 0 ? void 0 : _newProps$propName.color) !== null && _newProps$propName$co !== void 0 ? _newProps$propName$co : (_props$propName = props[propName]) === null || _props$propName === void 0 ? void 0 : _props$propName.color)\n    } : {};\n    newProps[propName] = _object_spread({}, textColor, newProps[propName], props[propName]);\n  }, \"au9PS1pGMSvlwCC87VHk+2CfJX8=\", false, function () {\n    return [useContrastText];\n  }));\n\n  return newProps;\n}\nexport var resolveValueWithBreakpoint = function resolveValueWithBreakpoint(values, breakpointTheme, currentBreakpoint, property) {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\nexport function calculateProps(theme, colorModeProps, componentTheme, props, windowWidth) {\n  var currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n\n  if (!props) {\n    props = {};\n  }\n\n  var newProps;\n\n  if (componentTheme) {\n    newProps = extractProps(filterDefaultProps(props, componentTheme.defaultProps), theme, colorModeProps, componentTheme, currentBreakpoint);\n    var componentBaseStyle = typeof componentTheme.baseStyle !== \"function\" ? componentTheme.baseStyle : componentTheme.baseStyle(_object_spread({\n      theme: theme\n    }, newProps, props, colorModeProps));\n    newProps = mergeWith(newProps, componentBaseStyle, function (objValue, srcValue, key) {\n      if (!isNil(objValue)) {\n        delete newProps[key];\n      }\n    });\n    var variant = props.variant || get(componentTheme, \"defaultProps.variant\");\n\n    if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n      var colorScheme = props.colorScheme || get(componentTheme, \"defaultProps.colorScheme\");\n      var variantProps = componentTheme.variants[variant](_object_spread(_object_spread_props(_object_spread({}, props, newProps), {\n        colorScheme: colorScheme,\n        theme: theme\n      }), colorModeProps));\n      variantProps = extractProps(variantProps, theme, colorModeProps, componentTheme, currentBreakpoint);\n      newProps = mergeWith(newProps, variantProps, function (objValue, srcValue, key) {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      });\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n\n  var extractedProps = extractProps(props, theme, colorModeProps, componentTheme, currentBreakpoint);\n  newProps = mergeWith(newProps, extractedProps, function (objValue, srcValue, key) {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\hooks\\useThemeProps\\utils.js"],"names":["get","isNil","mergeWith","cloneDeep","themePropertyMap","getClosestBreakpoint","findLastValidBreakpoint","hasValidBreakpointFormat","extractInObject","useContrastText","extractProps","props","theme","componentTheme","currentBreakpoint","newProps","property","propValues","extractPropertyFromFunction","nestedProp","concat","shadowProps","resolveValueWithBreakpoint","breakpoints","filterDefaultProps","defaultProps","resultProps","Object","keys","funcProps","isNested","some","key","mergeUnderscoreProps","_props","filter","propName","startsWith","forEach","_newProps$bg","_newProps$propName$co","_newProps$propName","_props$propName","bg","backgroundColor","textColor","color","values","breakpointTheme","calculateProps","colorModeProps","windowWidth","componentBaseStyle","baseStyle","objValue","srcValue","variant","variants","colorScheme","variantProps","extractedProps"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport { getClosestBreakpoint, findLastValidBreakpoint, hasValidBreakpointFormat, extractInObject } from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n/*\n Extract props from theme props and omit those from props\n*/\n\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\n\nexport function extractProps(props, theme, {}, componentTheme, currentBreakpoint) {\n  let newProps = {};\n\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(property, props, theme, componentTheme);\n\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(theme, \"\".concat(themePropertyMap[nestedProp], \".\").concat(propValues[nestedProp]), propValues[nestedProp]);\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]][props[property]];\n\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps,\n            ...shadowProps\n          };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n    }\n  }\n\n  return cloneDeep(newProps);\n}\n/*\nRemove props from defaultProps that are already present in props\n*/\n\nfunction filterDefaultProps(props, defaultProps) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\n\n\nexport const extractPropertyFromFunction = (property, props, theme, componentTheme) => {\n  let propValues; // Check if the entry in the theme is a function then calling it with all theme and props as params\n\n  if (componentTheme && typeof componentTheme[themePropertyMap[property]] === 'function') {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props\n    }); // Check if returned object from componentTheme is a nested object\n\n    let isNested = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    }); // If the returned value is nested object then find the property value in it, otherwise return the whole object\n\n    propValues = isNested ? { ...get(funcProps, \"\".concat(props[property]))\n    } : { ...funcProps\n    };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(componentTheme, \"\".concat(themePropertyMap[property], \".\").concat(props[property]));\n  }\n\n  return propValues;\n};\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\n\nexport function mergeUnderscoreProps(newProps, props) {\n  const _props = Object.keys(newProps).filter(propName => propName.startsWith('_'));\n\n  _props.forEach(propName => {\n    var _newProps$bg, _newProps$propName$co, _newProps$propName, _props$propName;\n\n    // Adding color based on bg contrast if no color is given\n    const bg = (_newProps$bg = newProps.bg) !== null && _newProps$bg !== void 0 ? _newProps$bg : newProps.backgroundColor;\n    const textColor = bg ? {\n      color: useContrastText(bg, (_newProps$propName$co = (_newProps$propName = newProps[propName]) === null || _newProps$propName === void 0 ? void 0 : _newProps$propName.color) !== null && _newProps$propName$co !== void 0 ? _newProps$propName$co : (_props$propName = props[propName]) === null || _props$propName === void 0 ? void 0 : _props$propName.color)\n    } : {}; // Overriding calculated props with user added props\n\n    newProps[propName] = { ...textColor,\n      ...newProps[propName],\n      ...props[propName]\n    };\n  });\n\n  return newProps;\n}\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\n\nexport const resolveValueWithBreakpoint = (values, breakpointTheme, currentBreakpoint, property) => {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\n\nexport function calculateProps(theme, colorModeProps, componentTheme, props, windowWidth) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n\n  if (!props) {\n    props = {};\n  }\n\n  let newProps;\n\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(filterDefaultProps(props, componentTheme.defaultProps), theme, colorModeProps, componentTheme, currentBreakpoint); // Extracting props from base style\n\n    let componentBaseStyle = typeof componentTheme.baseStyle !== 'function' ? componentTheme.baseStyle : componentTheme.baseStyle({\n      theme,\n      ...newProps,\n      ...props,\n      ...colorModeProps\n    });\n    newProps = mergeWith(newProps, componentBaseStyle, // @ts-ignore\n    (objValue, srcValue, key) => {\n      if (!isNil(objValue)) {\n        delete newProps[key];\n      }\n    });\n    const variant = props.variant || get(componentTheme, 'defaultProps.variant'); // Extracting props from variant\n\n    if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n      const colorScheme = props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({ ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps\n      });\n      variantProps = extractProps(variantProps, theme, colorModeProps, componentTheme, currentBreakpoint); // added this to handle order of props\n\n      newProps = mergeWith(newProps, variantProps, // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      });\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  } // Extracting props from normal props\n\n\n  let extractedProps = extractProps(props, theme, colorModeProps, componentTheme, currentBreakpoint); // added this to handle order of props\n  // @ts-ignore\n\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}