{"ast":null,"code":"import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\nimport _sliced_to_array from \"@swc/helpers/src/_sliced_to_array.mjs\";\n\nvar _s = $RefreshSig$();\n\nimport { useTypeaheadReducer } from \"./reducer\";\nimport React, { useEffect } from \"react\";\nimport * as stateChangeTypes from \"./types\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { dropdownDefaultStateValues, getDefaultValue } from \"./utils\";\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nexport function useTypeahead(props) {\n  _s();\n\n  var defaultValues = _object_spread({}, dropdownDefaultStateValues);\n\n  defaultValues.isOpen = getDefaultValue(props, \"isOpen\");\n\n  var ref = _sliced_to_array(React.useReducer(useTypeaheadReducer, defaultValues), 2),\n      state = ref[0],\n      dispatch = ref[1];\n\n  var dispatchWithProps = function dispatchWithProps(object) {\n    dispatch(_object_spread_props(_object_spread({}, object), {\n      props: props\n    }));\n  };\n\n  var inputValue = state.inputValue,\n      isOpen = state.isOpen;\n  var items = props.items,\n      onInputValueChange = props.onInputValueChange,\n      onSelectedItemChange = props.onSelectedItemChange,\n      selectedItem = props.selectedItem,\n      itemToString = props.itemToString;\n  var isControlled = isControlledProp(props, \"selectedItem\");\n  useEffect(function () {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  var onChangeText = function onChangeText(text) {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  var handleItemSelect = function handleItemSelect(item, index) {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index: index\n    });\n    Keyboard.dismiss();\n  };\n\n  var getMenuItemProps = function getMenuItemProps(item, index) {\n    return {\n      onPress: function onPress() {\n        return handleItemSelect(item, index);\n      },\n      accessible: true,\n      accessiblityRole: \"menuitem\"\n    };\n  };\n\n  var getMenuProps = function getMenuProps() {\n    return {\n      accessible: true,\n      accessibilityRole: \"menu\",\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  var getToggleButtonProps = function getToggleButtonProps() {\n    return {\n      onPress: function onPress() {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  var getInputProps = function getInputProps(propInputVal, propOnchangeText) {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: \"combobox\",\n      accessibilityLabel: \"Typeahead input\",\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps: getInputProps,\n    getMenuItemProps: getMenuItemProps,\n    getMenuProps: getMenuProps,\n    getToggleButtonProps: getToggleButtonProps,\n    isOpen: isOpen\n  };\n}\n\n_s(useTypeahead, \"W/0g4fM6aE87kNZ0Uhdp9P2sXlM=\");\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\components\\composites\\Typeahead\\useTypeahead\\useTypeahead.js"],"names":["useTypeaheadReducer","React","useEffect","stateChangeTypes","dropdownDefaultStateValues","getDefaultValue","isControlledProp","props","key","undefined","useTypeahead","defaultValues","isOpen","state","dispatch","useReducer","dispatchWithProps","object","inputValue","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","type","ControlledPropUpdatedSelectedItem","onChangeText","text","InputChange","handleItemSelect","item","index","ItemClick","Keyboard","dismiss","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","concat","length","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","propOnchangeText","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"AAAA,OAAA,cAAA,MAAA,qCAAA;;;;;;AAAA,SAASA,mBAAT,QAAoC,WAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAA,KAAYC,gBAAZ,MAAkC,SAAlC;;AAEA,SAASC,0BAAT,EAAqCC,eAArC,QAA4D,SAA5D;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,GAAjC,EAAsC;EACpC,OAAOD,KAAK,CAACC,GAAD,CAALD,KAAeE,SAAtB;AACD;;AAED,OAAO,SAASC,YAAT,CAAsBH,KAAtB,EAA6B;;;EAClC,IAAII,aAAa,GAAG,cAAA,CAAA,EAAA,EAAKP,0BAAL,CAApB;;EAEAO,aAAa,CAACC,MAAdD,GAAuBN,eAAe,CAACE,KAAD,EAAQ,QAAR,CAAtCI;;EACA,IAA0BV,GAAoD,GAAA,gBAAA,CAApDA,KAAK,CAACc,UAANd,CAAiBD,mBAAjBC,EAAsCU,aAAtCV,CAAoD,EAAA,CAAA,CAA9E;EAAA,IAAOY,KAAK,GAAcZ,GAAoD,CAAlE,CAAkE,CAA9E;EAAA,IAAca,QAAQ,GAAIb,GAAoD,CAAxD,CAAwD,CAA9E;;EAEA,IAAMe,iBAAiB,GAAGC,SAApBD,iBAAoBC,CAAAA,MAAAA,EAAU;IAClCH,QAAQ,CAAC,oBAAA,CAAA,cAAA,CAAA,EAAA,EAAKG,MAAL,CAAA,EAAW;MAClBV,KAAK,EAALA;IADkB,CAAX,CAAD,CAARO;EAGA,CAJF;;EAMA,IACEI,UAAU,GAERL,KAAK,CAFPK,UADF;EAAA,IAEEN,MAAM,GACJC,KAAK,CADPD,MAFF;EAIA,IACEO,KAAK,GAKHZ,KAAK,CALPY,KADF;EAAA,IAEEC,kBAAkB,GAIhBb,KAAK,CAJPa,kBAFF;EAAA,IAGEC,oBAAoB,GAGlBd,KAAK,CAHPc,oBAHF;EAAA,IAIEC,YAAY,GAEVf,KAAK,CAFPe,YAJF;EAAA,IAKEC,YAAY,GACVhB,KAAK,CADPgB,YALF;EAOA,IAAMC,YAAY,GAAGlB,gBAAgB,CAACC,KAAD,EAAQ,cAAR,CAArC;EACAL,SAAS,CAAC,YAAM;IACd,IAAIsB,YAAJ,EAAkB;MAChBV,QAAQ,CAAC;QACPW,IAAI,EAAEtB,gBAAgB,CAACuB,iCADhB;QAEPR,UAAU,EAAEK,YAAY,CAACD,YAAD;MAFjB,CAAD,CAARR;IAID;EACF,CAPQ,EAON,CAACQ,YAAD,EAAeE,YAAf,EAA6BD,YAA7B,CAPM,CAATrB;;EASA,IAAMyB,YAAY,GAAGC,SAAfD,YAAeC,CAAAA,IAAAA,EAAQ;IAC3BR,kBAAkB,KAAK,IAAvBA,IAA+BA,kBAAkB,KAAK,KAAK,CAA3DA,GAA+D,KAAK,CAApEA,GAAwEA,kBAAkB,CAAC;MACzFF,UAAU,EAAEU;IAD6E,CAAD,CAA1FR;IAGAJ,iBAAiB,CAAC;MAChBS,IAAI,EAAEtB,gBAAgB,CAAC0B,WADP;MAEhBX,UAAU,EAAEU;IAFI,CAAD,CAAjBZ;EAIA,CARF;;EAUA,IAAMc,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAOC,KAAP,EAAiB;IACxCX,oBAAoB,KAAK,IAAzBA,IAAiCA,oBAAoB,KAAK,KAAK,CAA/DA,GAAmE,KAAK,CAAxEA,GAA4EA,oBAAoB,CAACU,IAAD,CAAhGV;IACAL,iBAAiB,CAAC;MAChBS,IAAI,EAAEtB,gBAAgB,CAAC8B,SADP;MAEhBD,KAAK,EAALA;IAFgB,CAAD,CAAjBhB;IAIAkB,QAAQ,CAACC,OAATD;EACA,CAPF;;EASA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACL,IAAD,EAAOC,KAAP,EAAiB;IACxC,OAAO;MACLK,OAAO,EAAE,mBAAA;eAAMP,gBAAgB,CAACC,IAAD,EAAOC,KAAP,C;MAAa,CADvC;MAELM,UAAU,EAAE,IAFP;MAGLC,gBAAgB,EAAE;IAHb,CAAP;EAKA,CANF;;EAQA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;IACzB,OAAO;MACLF,UAAU,EAAE,IADP;MAELG,iBAAiB,EAAE,MAFd;MAGLC,iBAAiB,EAAE,WAAWC,MAAX,CAAkBxB,KAAK,CAACyB,MAAxB,EAAgC,UAAhC;IAHd,CAAP;EAKA,CANF;;EAQA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;IACjC,OAAO;MACLR,OAAO,EAAE,mBAAM;QACbrB,iBAAiB,CAAC;UAChBS,IAAI,EAAEtB,gBAAgB,CAAC2C;QADP,CAAD,CAAjB9B;MAGD;IALI,CAAP;EAOA,CARF;;EAUA,IAAM+B,aAAa,GAAG,SAAhBA,aAAgB,CAACC,YAAD,EAAeC,gBAAf,EAAoC;IACxD,OAAO;MACLtB,YAAY,EAAEqB,YAAY,GAAGC,gBAAH,GAAsBtB,YAD3C;MAELuB,KAAK,EAAEF,YAAY,GAAGA,YAAH,GAAkB9B,UAFhC;MAGLuB,iBAAiB,EAAE,UAHd;MAILU,kBAAkB,EAAE,iBAJf;MAKLC,kBAAkB,EAAE;QAClBC,QAAQ,EAAEzC;MADQ;IALf,CAAP;EASA,CAVF;;EAYA,OAAO;IACLmC,aAAa,EAAbA,aADK;IAELX,gBAAgB,EAAhBA,gBAFK;IAGLI,YAAY,EAAZA,YAHK;IAILK,oBAAoB,EAApBA,oBAJK;IAKLjC,MAAM,EAANA;EALK,CAAP;AAOD;;GAjGeF,Y,EAAY,8B","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nexport function useTypeahead(props) {\n  let defaultValues = { ...dropdownDefaultStateValues\n  };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n  const [state, dispatch] = React.useReducer(useTypeaheadReducer, defaultValues);\n\n  const dispatchWithProps = object => {\n    dispatch({ ...object,\n      props\n    });\n  };\n\n  const {\n    inputValue,\n    isOpen\n  } = state;\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString\n  } = props;\n  const isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = text => {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  const handleItemSelect = (item, index) => {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index\n    });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item, index) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  const getInputProps = (propInputVal, propOnchangeText) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen\n  };\n}\n//# sourceMappingURL=useTypeahead.js.map"]},"metadata":{},"sourceType":"module"}