{"ast":null,"code":"import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar linkToHREF = function linkToHREF(URL) {\n  Linking.openURL(URL).catch(function (err) {\n    return console.error(\"An error occurred\", err);\n  });\n};\n\nvar addOnPressFunctionality = function addOnPressFunctionality(href, callback) {\n  href ? linkToHREF(href) : \"\";\n  callback ? callback() : function () {};\n};\n\nexport function useLink(props) {\n  var href = props.href,\n      isExternal = props.isExternal,\n      _onPress = props.onPress,\n      _ref = props._ref;\n  var platformLinkProps = {};\n\n  if (Platform.OS === \"web\") {\n    platformLinkProps = {\n      href: href,\n      onClick: _onPress\n    };\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = \"_blank\";\n    }\n  } else {\n    platformLinkProps = {\n      onPress: function onPress() {\n        addOnPressFunctionality(href, _onPress);\n      }\n    };\n  }\n\n  return {\n    linkProps: _object_spread_props(_object_spread({}, platformLinkProps), {\n      accessibilityRole: \"link\",\n      accessible: true\n    })\n  };\n}\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\components\\primitives\\Link\\useLink.js"],"names":["linkToHREF","URL","Linking","openURL","catch","err","console","error","addOnPressFunctionality","href","callback","useLink","props","isExternal","onPress","_ref","platformLinkProps","Platform","OS","onClick","current","target","linkProps","accessibilityRole","accessible"],"mappings":"AAAA,OAAA,cAAA,MAAA,qCAAA;;;;;AAEA,IAAMA,UAAU,GAAGC,SAAbD,UAAaC,CAAAA,GAAAA,EAAO;EACxBC,OAAO,CAACC,OAARD,CAAgBD,GAAhBC,EAAqBE,KAArBF,CAA2BG,UAAAA,GAAAA,EAAG;WAAIC,OAAO,CAACC,KAARD,CAAc,mBAAdA,EAAmCD,GAAnCC,C;EAAuC,CAAzEJ;AACA,CAFF;;AAIA,IAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,IAAD,EAAOC,QAAP,EAAoB;EAClDD,IAAI,GAAGT,UAAU,CAACS,IAAD,CAAb,GAAsB,EAA1BA;EACAC,QAAQ,GAAGA,QAAQ,EAAX,GAAgB,YAAM,CAAE,CAAhCA;AACA,CAHF;;AAKA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;EAC7B,IACEH,IAAI,GAIFG,KAAK,CAJPH,IADF;EAAA,IAEEI,UAAU,GAGRD,KAAK,CAHPC,UAFF;EAAA,IAGEC,QAAO,GAELF,KAAK,CAFPE,OAHF;EAAA,IAIEC,IAAI,GACFH,KAAK,CADPG,IAJF;EAMA,IAAIC,iBAAiB,GAAG,EAAxB;;EAEA,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;IACzBD,iBAAiB,GAAG;MAClBP,IAAI,EAAJA,IADkB;MAElBU,OAAO,EAAEL;IAFS,CAApBE;;IAKA,IAAIH,UAAU,IAAIE,IAAI,CAACK,OAAvB,EAAgC;MAC9BL,IAAI,CAACK,OAALL,CAAaM,MAAbN,GAAsB,QAAtBA;IACD;EACF,CATD,MASO;IACLC,iBAAiB,GAAG;MAClBF,OAAO,EAAE,mBAAM;QACbN,uBAAuB,CAACC,IAAD,EAAOK,QAAP,CAAvBN;MACD;IAHiB,CAApBQ;EAKD;;EAED,OAAO;IACLM,SAAS,EAAE,oBAAA,CAAA,cAAA,CAAA,EAAA,EAAKN,iBAAL,CAAA,EAAsB;MAC/BO,iBAAiB,EAAE,MADY;MAE/BC,UAAU,EAAE;IAFmB,CAAtB;EADN,CAAP;AAMD","sourcesContent":["import { Linking, Platform } from 'react-native';\n\nconst linkToHREF = URL => {\n  Linking.openURL(URL).catch(err => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href, callback) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props) {\n  const {\n    href,\n    isExternal,\n    onPress,\n    _ref\n  } = props;\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress\n    }; // Adding target to a tag created by RN-Web\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      }\n    };\n  }\n\n  return {\n    linkProps: { ...platformLinkProps,\n      accessibilityRole: 'link',\n      accessible: true\n    }\n  };\n}\n//# sourceMappingURL=useLink.js.map"]},"metadata":{},"sourceType":"module"}