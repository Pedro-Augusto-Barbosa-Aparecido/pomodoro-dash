{"ast":null,"code":"\"use strict\";\n\nimport PressResponder from \"./PressResponder\";\nimport { useDebugValue, useEffect, useRef } from \"react\";\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current;\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}\n;","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\react-native-web\\dist\\modules\\usePressEvents\\index.js"],"names":["PressResponder","useDebugValue","useEffect","useRef","usePressEvents","hostRef","config","pressResponderRef","current","pressResponder","configure","reset","getEventHandlers"],"mappings":"AASA;;AAEA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,MAAnC,QAAiD,OAAjD;AACA,eAAe,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;EACtD,IAAIC,iBAAiB,GAAGJ,MAAM,CAAC,IAAD,CAA9B;;EAEA,IAAII,iBAAiB,CAACC,OAAlBD,IAA6B,IAAjC,EAAuC;IACrCA,iBAAiB,CAACC,OAAlBD,GAA4B,IAAIP,cAAJ,CAAmBM,MAAnB,CAA5BC;EACD;;EAED,IAAIE,cAAc,GAAGF,iBAAiB,CAACC,OAAvC;EAEAN,SAAS,CAAC,YAAY;IACpBO,cAAc,CAACC,SAAfD,CAAyBH,MAAzBG;EACD,CAFQ,EAEN,CAACH,MAAD,EAASG,cAAT,CAFM,CAATP;EAKAA,SAAS,CAAC,YAAY;IACpB,OAAO,YAAY;MACjBO,cAAc,CAACE,KAAfF;IACD,CAFD;EAGD,CAJQ,EAIN,CAACA,cAAD,CAJM,CAATP;EAKAD,aAAa,CAACK,MAAD,CAAbL;EACA,OAAOQ,cAAc,CAACG,gBAAfH,EAAP;AACD;AAAA","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"]},"metadata":{},"sourceType":"module"}