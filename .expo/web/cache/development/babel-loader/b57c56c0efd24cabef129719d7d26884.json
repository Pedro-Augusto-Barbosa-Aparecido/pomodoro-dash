{"ast":null,"code":"import _object_without_properties from \"@swc/helpers/src/_object_without_properties.mjs\";\n\nvar _s = $RefreshSig$();\n\nimport React, { memo, forwardRef } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { usePropsResolution, useStyledSystemPropsResolver } from \"../../../hooks\";\nimport { getColor } from \"../../../theme\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useTheme } from \"../../../hooks\";\n\nvar Spinner = function Spinner(props, ref) {\n  _s();\n\n  var _ref = usePropsResolution(\"Spinner\", props),\n      color = _ref.color,\n      size = _ref.size,\n      style = _ref.style,\n      testID = _ref.testID,\n      resolvedProps = _object_without_properties(_ref, [\"color\", \"size\", \"style\", \"testID\"]);\n\n  var resolvedColor = getColor(color, useTheme().colors, useTheme());\n  var resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(ActivityIndicator, {\n    testID: testID,\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\n_s(Spinner, \"hoDbfdUaqEkDR1aLU6qNFQZaH4g=\", false, function () {\n  return [usePropsResolution, useTheme, useTheme, useStyledSystemPropsResolver, useHasResponsiveProps];\n});\n\n_c = Spinner;\nexport default _c2 = memo(_c1 = forwardRef(Spinner));\n\nvar _c, _c1, _c2;\n\n$RefreshReg$(_c, \"Spinner\");\n$RefreshReg$(_c1, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\components\\primitives\\Spinner\\index.js"],"names":["React","memo","forwardRef","usePropsResolution","useStyledSystemPropsResolver","getColor","useHasResponsiveProps","useTheme","Spinner","props","ref","color","size","style","testID","resolvedProps","resolvedColor","colors","resolvedStyle","createElement","ActivityIndicator","accessible","accessibilityLabel"],"mappings":"AAAA,OAAA,0BAAA,MAAA,iDAAA;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,SAASC,kBAAT,EAA6BC,4BAA7B,QAAiE,gBAAjE;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,GAAR,EAAgB;;;EAC9B,IAMIP,IAAoC,GAApCA,kBAAkB,CAAC,SAAD,EAAYM,KAAZ,CANtB;EAAA,IACEE,KAAK,GAKHR,IAAoC,CALtCQ,KADF;EAAA,IAEEC,IAAI,GAIFT,IAAoC,CAJtCS,IAFF;EAAA,IAGEC,KAAK,GAGHV,IAAoC,CAHtCU,KAHF;EAAA,IAIEC,MAAM,GAEJX,IAAoC,CAFtCW,MAJF;EAAA,IAKKC,aAAa,GAAA,0BAAA,CACdZ,IADc,EACsB,CALtCQ,OAKsC,EAJtCC,MAIsC,EAHtCC,OAGsC,EAFtCC,QAEsC,CADtB,CALlB;;EAOA,IAAME,aAAa,GAAGX,QAAQ,CAACM,KAAD,EAAQJ,QAAQ,GAAGU,MAAnB,EAA2BV,QAAQ,EAAnC,CAA9B;EACA,IAAMW,aAAa,GAAGd,4BAA4B,CAACW,aAAD,CAAlD;;EAEA,IAAIT,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,OAAoBT,KAAK,CAACmB,aAANnB,CAAoBoB,iBAApBpB,EAAuC;IACzDc,MAAM,EAAEA,MADiD;IAEzDO,UAAU,EAAE,IAF6C;IAGzDC,kBAAkB,EAAE,SAHqC;IAIzDX,KAAK,EAAEK,aAJkD;IAKzDN,GAAG,EAAEA,GALoD;IAMzDE,IAAI,EAAEA,IANmD;IAOzDC,KAAK,EAAE,CAACK,aAAD,EAAgBL,KAAhB;EAPkD,CAAvCb,CAApB;AASA,CAxBF;;GAAMQ,O,EAAO,8B,EAAA,K,EAAA,YAAA;UAOPL,kB,EACkCI,Q,EAAmBA,Q,EACnCH,4B,EAElBE,qB;;;AAXAE,EAAAA,GAAAA,OAAAA;AA0BN,eAA4BP,GAAAA,GAAAA,IAAI,CAAeC,GAAAA,GAAAA,UAAU,CAACM,OAAD,CAAzB,CAAhC","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport { usePropsResolution, useStyledSystemPropsResolver } from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props, ref) => {\n  const {\n    color,\n    size,\n    style,\n    testID,\n    ...resolvedProps\n  } = usePropsResolution('Spinner', props);\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ActivityIndicator, {\n    testID: testID,\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Spinner));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}