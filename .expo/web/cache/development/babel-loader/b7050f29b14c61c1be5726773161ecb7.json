{"ast":null,"code":"import _object_without_properties from \"@swc/helpers/src/_object_without_properties.mjs\";\nimport _sliced_to_array from \"@swc/helpers/src/_sliced_to_array.mjs\";\n\nvar _s = $RefreshSig$();\n\nimport get from \"lodash.get\";\nimport omit from \"lodash.omit\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useNativeBase } from \"./../useNativeBase\";\nimport { omitUndefined, extractInObject } from \"./../../theme/tools/\";\nimport { filterShadowProps } from \"./../../utils/filterShadowProps\";\nimport { calculateProps } from \"./utils\";\n\nvar filterAndCalculateProps = function filterAndCalculateProps(theme, colorModeProps, componentTheme, propsReceived, windowWidth) {\n  var ref = _sliced_to_array(extractInObject(propsReceived, [\"children\", \"style\", \"onPress\", \"icon\", \"onOpen\", \"onClose\"]), 2),\n      ignoredProps = ref[0],\n      props = ref[1];\n\n  var newProps = calculateProps(theme, colorModeProps, componentTheme, props, windowWidth);\n  var mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component, propsReceived) {\n  _s();\n\n  var _useWindowDimensions;\n\n  var _ref = useNativeBase(),\n      theme = _ref.theme,\n      colorModeProps = _object_without_properties(_ref, [\"theme\"]);\n\n  var componentTheme = get(theme, \"components.\".concat(component));\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  return filterAndCalculateProps(omit(theme, [\"components\"]), colorModeProps, componentTheme, propsReceived, windowWidth);\n}\n\n_s(useThemeProps, \"Lq4FZGfE5y4B4o823Cv+7BTl4mU=\", false, function () {\n  return [useNativeBase, useWindowDimensions];\n});\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\hooks\\useThemeProps\\useProps.js"],"names":["get","omit","useNativeBase","omitUndefined","extractInObject","filterShadowProps","calculateProps","filterAndCalculateProps","theme","colorModeProps","componentTheme","propsReceived","windowWidth","ignoredProps","props","newProps","mergedProps","Platform","OS","useThemeProps","component","_useWindowDimensions","concat","useWindowDimensions","width"],"mappings":"AAAA,OAAA,0BAAA,MAAA,iDAAA;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;;AAEA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,sBAA/C;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,cAAT,QAA+B,SAA/B;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,aAAxC,EAAuDC,WAAvD,EAAuE;EAIrG,IAA4BR,GAA6F,GAAA,gBAAA,CAA7FA,eAAe,CAACO,aAAD,EAAgB,CAAC,UAAD,EAAa,OAAb,EAAsB,SAAtB,EAAiC,MAAjC,EAAyC,QAAzC,EAAmD,SAAnD,CAAhB,CAA8E,EAAA,CAAA,CAAzH;EAAA,IAAKE,YAAY,GAAWT,GAA6F,CAAxG,CAAwG,CAAzH;EAAA,IAAmBU,KAAK,GAAIV,GAA6F,CAAjG,CAAiG,CAAzH;;EACA,IAAIW,QAAQ,GAAGT,cAAc,CAACE,KAAD,EAAQC,cAAR,EAAwBC,cAAxB,EAAwCI,KAAxC,EAA+CF,WAA/C,CAA7B;EACA,IAAII,WAAW,GAAGX,iBAAiB,CAACU,QAAD,EAAWF,YAAX,EAAyBI,QAAQ,CAACC,EAAlC,CAAnC;EACA,OAAOf,aAAa,CAACa,WAAD,CAApB;AACA,CARF;;AAUA,OAAO,SAASG,aAAT,CAAuBC,SAAvB,EAAkCT,aAAlC,EAAiD;;;EACtD,IAAIU,oBAAJ;;EAEA,IAGInB,IAAe,GAAfA,aAAa,EAHjB;EAAA,IACEM,KAAK,GAEHN,IAAe,CAFjBM,KADF;EAAA,IAEKC,cAAc,GAAA,0BAAA,CACfP,IADe,EACA,CAFjBM,OAEiB,CADA,CAFnB;;EAKA,IAAME,cAAc,GAAGV,GAAG,CAACQ,KAAD,EAAQ,cAAcc,MAAd,CAAqBF,SAArB,CAAR,CAA1B;EAEA,IAAMR,WAAW,GAAG,CAACS,oBAAoB,GAAGE,mBAAmB,EAA3C,MAAmD,IAAnD,IAA2DF,oBAAoB,KAAK,KAAK,CAAzF,GAA6F,KAAK,CAAlG,GAAsGA,oBAAoB,CAACG,KAA/I;EAEA,OAAOjB,uBAAuB,CAACN,IAAI,CAACO,KAAD,EAAQ,CAAC,YAAD,CAAR,CAAL,EAA8BC,cAA9B,EAA8CC,cAA9C,EAA8DC,aAA9D,EAA6EC,WAA7E,CAA9B;AACD;;GAbeO,a,EAAa,8B,EAAA,K,EAAA,YAAA;UAMvBjB,a,EAIwCqB,mB","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (theme, colorModeProps, componentTheme, propsReceived, windowWidth) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, ['children', 'style', 'onPress', 'icon', 'onOpen', 'onClose']);\n  let newProps = calculateProps(theme, colorModeProps, componentTheme, props, windowWidth);\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component, propsReceived) {\n  var _useWindowDimensions;\n\n  const {\n    theme,\n    ...colorModeProps\n  } = useNativeBase(); // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, \"components.\".concat(component)); // console.log('COMPONENT THEME = ', componentTheme);\n\n  const windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width; // To pass the component theme props and component props seperately\n\n  return filterAndCalculateProps(omit(theme, ['components']), colorModeProps, componentTheme, propsReceived, windowWidth);\n}\n//# sourceMappingURL=useProps.js.map"]},"metadata":{},"sourceType":"module"}