{"ast":null,"code":"import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _sliced_to_array from \"@swc/helpers/src/_sliced_to_array.mjs\";\n\nvar _s = $RefreshSig$();\n\nimport { OverlayContainer } from \"@react-native-aria/overlays\";\nimport React from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useKeyboardDismissable } from \"../../../hooks\";\nimport { ExitAnimationContext } from \"./ExitAnimationContext\";\nexport function Overlay(param) {\n  var children = param.children,\n      isOpen = param.isOpen,\n      _useRNModal = param.useRNModal,\n      useRNModal = _useRNModal === void 0 ? false : _useRNModal,\n      _useRNModalOnAndroid = param.useRNModalOnAndroid,\n      useRNModalOnAndroid = _useRNModalOnAndroid === void 0 ? false : _useRNModalOnAndroid,\n      _isKeyboardDismissable = param.isKeyboardDismissable,\n      isKeyboardDismissable = _isKeyboardDismissable === void 0 ? true : _isKeyboardDismissable,\n      _animationPreset = param.animationPreset,\n      animationPreset = _animationPreset === void 0 ? \"fade\" : _animationPreset,\n      onRequestClose = param.onRequestClose,\n      style = param.style,\n      unmountOnExit = param.unmountOnExit;\n\n  _s();\n\n  var ref = _sliced_to_array(React.useState(!isOpen), 2),\n      exited = ref[0],\n      setExited = ref[1];\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : function () {}\n  });\n\n  var styleObj = _object_spread({}, style);\n\n  if (animationPreset === \"slide\") {\n    styleObj.overflow = \"hidden\";\n    styleObj.display = \"flex\";\n  } else {\n    styleObj.display = exited && !isOpen ? \"none\" : \"flex\";\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (useRNModal || useRNModalOnAndroid && Platform.OS === \"android\") {\n    return React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, React.createElement(Modal, {\n      statusBarTranslucent: true,\n      transparent: true,\n      visible: isOpen,\n      onRequestClose: onRequestClose,\n      animationType: animationPreset\n    }, children));\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return React.createElement(OverlayContainer, {\n    style: _object_spread({}, styleObj)\n  }, React.createElement(ExitAnimationContext.Provider, {\n    value: {\n      exited: exited,\n      setExited: setExited\n    }\n  }, children));\n}\n\n_s(Overlay, \"SAMSJehf4YEOFhQ/cBW/8RCig8I=\", false, function () {\n  return [useKeyboardDismissable];\n});\n\n_c = Overlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"Overlay\");\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\components\\primitives\\Overlay\\Overlay.js"],"names":["OverlayContainer","React","useKeyboardDismissable","ExitAnimationContext","Overlay","children","isOpen","useRNModal","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","style","unmountOnExit","exited","setExited","useState","enabled","callback","styleObj","overflow","display","Platform","OS","createElement","Provider","value","Modal","statusBarTranslucent","transparent","visible","animationType"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Modal, Platform } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModal = false,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit\n}) {\n  const [exited, setExited] = React.useState(!isOpen);\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {}\n  });\n  const styleObj = { ...style\n  };\n\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (useRNModal || useRNModalOnAndroid && Platform.OS === 'android') {\n    return /*#__PURE__*/React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited,\n        setExited\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      statusBarTranslucent: true,\n      transparent: true,\n      visible: isOpen,\n      onRequestClose: onRequestClose,\n      animationType: animationPreset\n    }, children));\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    //@ts-ignore\n    React.createElement(OverlayContainer, {\n      style: { ...styleObj\n      }\n    }, /*#__PURE__*/React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited,\n        setExited\n      }\n    }, children))\n  );\n}\n//# sourceMappingURL=Overlay.js.map"]},"metadata":{},"sourceType":"module"}