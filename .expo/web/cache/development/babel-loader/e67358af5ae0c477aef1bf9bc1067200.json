{"ast":null,"code":"import _async_to_generator from \"@swc/helpers/src/_async_to_generator.mjs\";\nimport _sliced_to_array from \"@swc/helpers/src/_sliced_to_array.mjs\";\nimport regeneratorRuntime from \"D:\\\\codes\\\\Next\\\\pomodoro-dash\\\\node_modules\\\\next\\\\dist\\\\compiled\\\\regenerator-runtime\\\\runtime.js\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Clipboard from \"react-native-web/dist/exports/Clipboard\";\nexport function useClipboard() {\n  _s();\n\n  var ref = _sliced_to_array(React.useState(false), 2),\n      hasCopied = ref[0],\n      setHasCopied = ref[1];\n\n  var ref1 = _sliced_to_array(React.useState(\"\"), 2),\n      value = ref1[0],\n      setValue = ref1[1];\n\n  var onCopy = function () {\n    var _ref = _async_to_generator(regeneratorRuntime.mark(function _callee(copiedValue) {\n      return regeneratorRuntime.wrap(function _callee$(_ctx) {\n        while (1) {\n          switch (_ctx.prev = _ctx.next) {\n            case 0:\n              if (!Clipboard) {\n                _ctx.next = 3;\n                break;\n              }\n\n              _ctx.next = 3;\n              return Clipboard.setString(copiedValue);\n\n            case 3:\n              setValue(copiedValue);\n              setHasCopied(true);\n\n            case 5:\n            case \"end\":\n              return _ctx.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onCopy(copiedValue) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    value: value,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}\n\n_s(useClipboard, \"wScOM9etQVLLiadMpRhyFbPIYBg=\");\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\hooks\\useClipboard.js"],"names":["React","useClipboard","hasCopied","setHasCopied","useState","value","setValue","onCopy","copiedValue","Clipboard","setString"],"mappings":"AAAA,OAAA,mBAAA,MAAA,0CAAA;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,SAASC,YAAT,GAAwB;;;EAC7B,IAAkCD,GAAqB,GAAA,gBAAA,CAArBA,KAAK,CAACI,QAANJ,CAAe,KAAfA,CAAqB,EAAA,CAAA,CAAvD;EAAA,IAAOE,SAAS,GAAkBF,GAAqB,CAAvC,CAAuC,CAAvD;EAAA,IAAkBG,YAAY,GAAIH,GAAqB,CAAzB,CAAyB,CAAvD;;EACA,IAA0BA,IAAkB,GAAA,gBAAA,CAAlBA,KAAK,CAACI,QAANJ,CAAe,EAAfA,CAAkB,EAAA,CAAA,CAA5C;EAAA,IAAOK,KAAK,GAAcL,IAAkB,CAAhC,CAAgC,CAA5C;EAAA,IAAcM,QAAQ,GAAIN,IAAkB,CAAtB,CAAsB,CAA5C;;EAEA,IAAMO,MAAM,GAAA,YAAA;eAAG,mBAAA,CAAA,mBAAA,IAAA,CAAA,SAAA,OAAA,CAAMC,WAAN,EAAqB;;;;;kBAC9BC,CAAAA,S,EAAS;;;;;;qBACLA,SAAS,CAACC,SAAVD,CAAoBD,WAApBC,C;;;cAGRH,QAAQ,CAACE,WAAD,CAARF;cACAH,YAAY,CAAC,IAAD,CAAZA;;;;;;;;IACD,CAPc,CAAA,C;;oBAATI,M,CAAeC,W,EAAW;;;EAO/B,CAPW,EAAZ;;EASA,OAAO;IACLH,KAAK,EAALA,KADK;IAELE,MAAM,EAANA,MAFK;IAGLL,SAAS,EAATA;EAHK,CAAP;AAKD;;GAlBeD,Y,EAAY,8B","sourcesContent":["import React from 'react';\nimport { Clipboard } from 'react-native';\nexport function useClipboard() {\n  const [hasCopied, setHasCopied] = React.useState(false);\n  const [value, setValue] = React.useState('');\n\n  const onCopy = async copiedValue => {\n    if (Clipboard) {\n      await Clipboard.setString(copiedValue);\n    }\n\n    setValue(copiedValue);\n    setHasCopied(true);\n  };\n\n  return {\n    value,\n    onCopy,\n    hasCopied\n  };\n}\n//# sourceMappingURL=useClipboard.js.map"]},"metadata":{},"sourceType":"module"}