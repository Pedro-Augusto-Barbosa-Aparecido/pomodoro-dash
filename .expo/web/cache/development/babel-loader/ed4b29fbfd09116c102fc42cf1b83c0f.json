{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s1 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nvar keyboardDismissHandlers = [];\nexport var keyboardDismissHandlerManager = {\n  push: function push(handler) {\n    keyboardDismissHandlers.push(handler);\n    return function () {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(function (h) {\n        return h !== handler;\n      });\n    };\n  },\n  length: function length() {\n    return keyboardDismissHandlers.length;\n  },\n  pop: function pop() {\n    return keyboardDismissHandlers.pop();\n  }\n};\nexport var useKeyboardDismissable = function useKeyboardDismissable(param) {\n  var enabled = param.enabled,\n      callback = param.callback;\n\n  _s();\n\n  React.useEffect(function () {\n    var cleanupFn = function cleanupFn() {};\n\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n\n    return function () {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n  useBackHandler({\n    enabled: enabled,\n    callback: callback\n  });\n};\n\n_s(useKeyboardDismissable, \"KlZkzYNTu8FER+U0FBbL+PtOOIo=\", false, function () {\n  return [useBackHandler];\n});\n\nexport function useBackHandler(param) {\n  var enabled = param.enabled,\n      callback = param.callback;\n\n  _s1();\n\n  useEffect(function () {\n    var backHandler = function backHandler() {\n      callback();\n      return true;\n    };\n\n    if (enabled) {\n      BackHandler.addEventListener(\"hardwareBackPress\", backHandler);\n    } else {\n      BackHandler.removeEventListener(\"hardwareBackPress\", backHandler);\n    }\n\n    return function () {\n      return BackHandler.removeEventListener(\"hardwareBackPress\", backHandler);\n    };\n  }, [enabled, callback]);\n}\n\n_s1(useBackHandler, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\hooks\\useKeyboardDismissable.js"],"names":["React","useEffect","keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","filter","h","length","pop","useKeyboardDismissable","enabled","callback","cleanupFn","useBackHandler","backHandler","BackHandler","addEventListener","removeEventListener"],"mappings":"AAAA,IAAA,EAAA,GAAA,YAAA,EAAA;AAAA,IAAA,GAAA,GAAA,YAAA,EAAA;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,IAAIC,uBAAuB,GAAG,EAA9B;AACA,OAAO,IAAMC,6BAA6B,GAAG;EAC3CC,IAAI,EAAEC,cAAAA,OAAAA,EAAW;IACfH,uBAAuB,CAACE,IAAxBF,CAA6BG,OAA7BH;IACA,OAAO,YAAM;MACXA,uBAAuB,GAAGA,uBAAuB,CAACI,MAAxBJ,CAA+BK,UAAAA,CAAAA,EAAC;eAAIA,CAAC,KAAKF,O;MAAO,CAAjDH,CAA1BA;IACD,CAFD;EAGD,CAN0C;EAO3CM,MAAM,EAAE,kBAAA;WAAMN,uBAAuB,CAACM,M;EAAM,CAPD;EAQ3CC,GAAG,EAAE,eAAM;IACT,OAAOP,uBAAuB,CAACO,GAAxBP,EAAP;EACD;AAV0C,CAAtC;AAgBP,OAAO,IAAMQ,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,KAAA,EAGhC;MAFJC,OAAO,GAAA,KAAA,CAAPA,O;MACAC,QAAQ,GAAA,KAAA,CAARA,Q;;;;EAEAZ,KAAK,CAACC,SAAND,CAAgB,YAAM;IACpB,IAAIa,SAAS,GAAG,qBAAM,CAAG,CAAzB;;IAEA,IAAIF,OAAJ,EAAa;MACXE,SAAS,GAAGV,6BAA6B,CAACC,IAA9BD,CAAmCS,QAAnCT,CAAZU;IACD,CAFD,MAEO;MACLA,SAAS;IACV;;IAED,OAAO,YAAM;MACXA,SAAS;IACV,CAFD;EAGD,CAZDb,EAYG,CAACW,OAAD,EAAUC,QAAV,CAZHZ;EAaAc,cAAc,CAAC;IACbH,OAAO,EAAPA,OADa;IAEbC,QAAQ,EAARA;EAFa,CAAD,CAAdE;AAID,CArBM;;GAAMJ,sB,EAAsB,8B,EAAA,K,EAAA,YAAA;UAiBjCI,c;;;AAKF,OAAO,SAASA,cAAT,CAAwB,KAAxB,EAGJ;MAFDH,OAAO,GADsB,KAG9B,CAFCA,O;MACAC,QAAQ,GAFqB,KAG9B,CADCA,Q;;;;EAEAX,SAAS,CAAC,YAAM;IACd,IAAIc,WAAW,GAAG,SAAdA,WAAc,GAAM;MACtBH,QAAQ;MACR,OAAO,IAAP;IACA,CAHF;;IAKA,IAAID,OAAJ,EAAa;MACXK,WAAW,CAACC,gBAAZD,CAA6B,mBAA7BA,EAAkDD,WAAlDC;IACD,CAFD,MAEO;MACLA,WAAW,CAACE,mBAAZF,CAAgC,mBAAhCA,EAAqDD,WAArDC;IACD;;IAED,OAAO,YAAA;aAAMA,WAAW,CAACE,mBAAZF,CAAgC,mBAAhCA,EAAqDD,WAArDC,C;IAAiE,CAA9E;EACD,CAbQ,EAaN,CAACL,OAAD,EAAUC,QAAV,CAbM,CAATX;AAcD;;IAlBea,c,EAAc,8B","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\nlet keyboardDismissHandlers = [];\nexport const keyboardDismissHandlerManager = {\n  push: handler => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(h => h !== handler);\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  }\n};\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\n\nexport const useKeyboardDismissable = ({\n  enabled,\n  callback\n}) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n  useBackHandler({\n    enabled,\n    callback\n  });\n};\nexport function useBackHandler({\n  enabled,\n  callback\n}) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n\n    return () => BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n//# sourceMappingURL=useKeyboardDismissable.js.map"]},"metadata":{},"sourceType":"module"}