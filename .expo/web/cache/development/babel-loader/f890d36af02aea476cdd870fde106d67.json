{"ast":null,"code":"var slice = Array.prototype.slice;\nexport default function createOrderedCSSStyleSheet(sheet) {\n  var groups = {};\n  var selectors = {};\n\n  if (sheet != null) {\n    var group;\n    slice.call(sheet.cssRules).forEach(function (cssRule, i) {\n      var cssText = cssRule.cssText;\n\n      if (cssText.indexOf(\"stylesheet-group\") > -1) {\n        group = decodeGroupRule(cssRule);\n        groups[group] = {\n          start: i,\n          rules: [cssText]\n        };\n      } else {\n        var selectorText = getSelectorText(cssText);\n\n        if (selectorText != null) {\n          selectors[selectorText] = true;\n          groups[group].rules.push(cssText);\n        }\n      }\n    });\n  }\n\n  function sheetInsert(sheet, group, text) {\n    var orderedGroups = getOrderedGroups(groups);\n    var groupIndex = orderedGroups.indexOf(group);\n    var nextGroupIndex = groupIndex + 1;\n    var nextGroup = orderedGroups[nextGroupIndex];\n    var position = nextGroup != null && groups[nextGroup].start != null ? groups[nextGroup].start : sheet.cssRules.length;\n    var isInserted = insertRuleAt(sheet, text, position);\n\n    if (isInserted) {\n      if (groups[group].start == null) {\n        groups[group].start = position;\n      }\n\n      for (var i = nextGroupIndex; i < orderedGroups.length; i += 1) {\n        var groupNumber = orderedGroups[i];\n        var previousStart = groups[groupNumber].start || 0;\n        groups[groupNumber].start = previousStart + 1;\n      }\n    }\n\n    return isInserted;\n  }\n\n  var OrderedCSSStyleSheet = {\n    getTextContent: function getTextContent() {\n      return getOrderedGroups(groups).map(function (group) {\n        var rules = groups[group].rules;\n        return rules.join(\"\\n\");\n      }).join(\"\\n\");\n    },\n    insert: function insert(cssText, groupValue) {\n      var group = Number(groupValue);\n\n      if (groups[group] == null) {\n        var markerRule = encodeGroupRule(group);\n        groups[group] = {\n          start: null,\n          rules: [markerRule]\n        };\n\n        if (sheet != null) {\n          sheetInsert(sheet, group, markerRule);\n        }\n      }\n\n      var selectorText = getSelectorText(cssText);\n\n      if (selectorText != null && selectors[selectorText] == null) {\n        selectors[selectorText] = true;\n        groups[group].rules.push(cssText);\n\n        if (sheet != null) {\n          var isInserted = sheetInsert(sheet, group, cssText);\n\n          if (!isInserted) {\n            groups[group].rules.pop();\n          }\n        }\n      }\n    }\n  };\n  return OrderedCSSStyleSheet;\n}\n;\n\nfunction encodeGroupRule(group) {\n  return '[stylesheet-group=\"' + group + '\"]{}';\n}\n\nfunction decodeGroupRule(cssRule) {\n  return Number(cssRule.selectorText.split(/[\"']/)[1]);\n}\n\nfunction getOrderedGroups(obj) {\n  return Object.keys(obj).map(Number).sort(function (a, b) {\n    return a > b ? 1 : -1;\n  });\n}\n\nvar pattern = /\\s*([,])\\s*/g;\n\nfunction getSelectorText(cssText) {\n  var selector = cssText.split(\"{\")[0].trim();\n  return selector !== \"\" ? selector.replace(pattern, \"$1\") : null;\n}\n\nfunction insertRuleAt(root, cssText, position) {\n  try {\n    root.insertRule(cssText, position);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\react-native-web\\dist\\exports\\StyleSheet\\createOrderedCSSStyleSheet.js"],"names":["slice","Array","prototype","createOrderedCSSStyleSheet","sheet","groups","selectors","group","call","cssRules","forEach","cssRule","i","cssText","indexOf","decodeGroupRule","start","rules","selectorText","getSelectorText","push","sheetInsert","text","orderedGroups","getOrderedGroups","groupIndex","nextGroupIndex","nextGroup","position","length","isInserted","insertRuleAt","groupNumber","previousStart","OrderedCSSStyleSheet","getTextContent","map","join","insert","groupValue","Number","markerRule","encodeGroupRule","pop","split","obj","Object","keys","sort","a","b","pattern","selector","trim","replace","root","insertRule","e"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar slice = Array.prototype.slice;\n/**\n * Order-based insertion of CSS.\n *\n * Each rule is associated with a numerically defined group.\n * Groups are ordered within the style sheet according to their number, with the\n * lowest first.\n *\n * Groups are implemented using marker rules. The selector of the first rule of\n * each group is used only to encode the group number for hydration. An\n * alternative implementation could rely on CSSMediaRule, allowing groups to be\n * treated as a sub-sheet, but the Edge implementation of CSSMediaRule is\n * broken.\n * https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule\n * https://gist.github.com/necolas/aa0c37846ad6bd3b05b727b959e82674\n */\n\nexport default function createOrderedCSSStyleSheet(sheet) {\n  var groups = {};\n  var selectors = {};\n  /**\n   * Hydrate approximate record from any existing rules in the sheet.\n   */\n\n  if (sheet != null) {\n    var group;\n    slice.call(sheet.cssRules).forEach(function (cssRule, i) {\n      var cssText = cssRule.cssText; // Create record of existing selectors and rules\n\n      if (cssText.indexOf('stylesheet-group') > -1) {\n        group = decodeGroupRule(cssRule);\n        groups[group] = {\n          start: i,\n          rules: [cssText]\n        };\n      } else {\n        var selectorText = getSelectorText(cssText);\n\n        if (selectorText != null) {\n          selectors[selectorText] = true;\n          groups[group].rules.push(cssText);\n        }\n      }\n    });\n  }\n\n  function sheetInsert(sheet, group, text) {\n    var orderedGroups = getOrderedGroups(groups);\n    var groupIndex = orderedGroups.indexOf(group);\n    var nextGroupIndex = groupIndex + 1;\n    var nextGroup = orderedGroups[nextGroupIndex]; // Insert rule before the next group, or at the end of the stylesheet\n\n    var position = nextGroup != null && groups[nextGroup].start != null ? groups[nextGroup].start : sheet.cssRules.length;\n    var isInserted = insertRuleAt(sheet, text, position);\n\n    if (isInserted) {\n      // Set the starting index of the new group\n      if (groups[group].start == null) {\n        groups[group].start = position;\n      } // Increment the starting index of all subsequent groups\n\n\n      for (var i = nextGroupIndex; i < orderedGroups.length; i += 1) {\n        var groupNumber = orderedGroups[i];\n        var previousStart = groups[groupNumber].start || 0;\n        groups[groupNumber].start = previousStart + 1;\n      }\n    }\n\n    return isInserted;\n  }\n\n  var OrderedCSSStyleSheet = {\n    /**\n     * The textContent of the style sheet.\n     */\n    getTextContent: function getTextContent() {\n      return getOrderedGroups(groups).map(function (group) {\n        var rules = groups[group].rules;\n        return rules.join('\\n');\n      }).join('\\n');\n    },\n\n    /**\n     * Insert a rule into the style sheet\n     */\n    insert: function insert(cssText, groupValue) {\n      var group = Number(groupValue); // Create a new group.\n\n      if (groups[group] == null) {\n        var markerRule = encodeGroupRule(group); // Create the internal record.\n\n        groups[group] = {\n          start: null,\n          rules: [markerRule]\n        }; // Update CSSOM.\n\n        if (sheet != null) {\n          sheetInsert(sheet, group, markerRule);\n        }\n      } // selectorText is more reliable than cssText for insertion checks. The\n      // browser excludes vendor-prefixed properties and rewrites certain values\n      // making cssText more likely to be different from what was inserted.\n\n\n      var selectorText = getSelectorText(cssText);\n\n      if (selectorText != null && selectors[selectorText] == null) {\n        // Update the internal records.\n        selectors[selectorText] = true;\n        groups[group].rules.push(cssText); // Update CSSOM.\n\n        if (sheet != null) {\n          var isInserted = sheetInsert(sheet, group, cssText);\n\n          if (!isInserted) {\n            // Revert internal record change if a rule was rejected (e.g.,\n            // unrecognized pseudo-selector)\n            groups[group].rules.pop();\n          }\n        }\n      }\n    }\n  };\n  return OrderedCSSStyleSheet;\n}\n/**\n * Helper functions\n */\n\nfunction encodeGroupRule(group) {\n  return \"[stylesheet-group=\\\"\" + group + \"\\\"]{}\";\n}\n\nfunction decodeGroupRule(cssRule) {\n  return Number(cssRule.selectorText.split(/[\"']/)[1]);\n}\n\nfunction getOrderedGroups(obj) {\n  return Object.keys(obj).map(Number).sort(function (a, b) {\n    return a > b ? 1 : -1;\n  });\n}\n\nvar pattern = /\\s*([,])\\s*/g;\n\nfunction getSelectorText(cssText) {\n  var selector = cssText.split('{')[0].trim();\n  return selector !== '' ? selector.replace(pattern, '$1') : null;\n}\n\nfunction insertRuleAt(root, cssText, position) {\n  try {\n    // $FlowFixMe: Flow is missing CSSOM types needed to type 'root'.\n    root.insertRule(cssText, position);\n    return true;\n  } catch (e) {\n    // JSDOM doesn't support `CSSSMediaRule#insertRule`.\n    // Also ignore errors that occur from attempting to insert vendor-prefixed selectors.\n    return false;\n  }\n}"]},"metadata":{},"sourceType":"module"}