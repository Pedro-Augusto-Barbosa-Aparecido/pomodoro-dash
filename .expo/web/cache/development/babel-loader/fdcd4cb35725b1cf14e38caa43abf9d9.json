{"ast":null,"code":"import _async_to_generator from \"@swc/helpers/src/_async_to_generator.mjs\";\nimport _sliced_to_array from \"@swc/helpers/src/_sliced_to_array.mjs\";\nimport regeneratorRuntime from \"D:\\\\codes\\\\Next\\\\pomodoro-dash\\\\node_modules\\\\next\\\\dist\\\\compiled\\\\regenerator-runtime\\\\runtime.js\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nexport function useScreenReaderEnabled() {\n  _s();\n\n  var ref = _sliced_to_array(React.useState(false), 2),\n      enabled = ref[0],\n      setEnabled = ref[1];\n\n  var mountedRef = React.useRef(false);\n\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(function () {\n    mountedRef.current = true;\n\n    function setInitialValue() {\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    function _setInitialValue() {\n      _setInitialValue = _async_to_generator(regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_ctx) {\n          while (1) {\n            switch (_ctx.prev = _ctx.next) {\n              case 0:\n                _ctx.next = 2;\n                return AccessibilityInfo.isScreenReaderEnabled();\n\n              case 2:\n                res = _ctx.sent;\n                handleSetEnabled(res);\n\n              case 4:\n              case \"end\":\n                return _ctx.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    var handler = AccessibilityInfo.addEventListener(\"screenReaderChanged\", function (event) {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener(\"screenReaderChanged\", handler);\n    };\n  });\n  return enabled;\n}\n\n_s(useScreenReaderEnabled, \"lYEv5EE4yQebWQ8ZJOJ3Yj+4LBc=\");\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["D:\\codes\\Next\\pomodoro-dash\\node_modules\\native-base\\lib\\module\\hooks\\useScreenReaderEnabled.js"],"names":["React","useScreenReaderEnabled","enabled","setEnabled","useState","mountedRef","useRef","handleSetEnabled","value","current","useEffect","setInitialValue","res","AccessibilityInfo","isScreenReaderEnabled","handler","addEventListener","event","removeEventListener"],"mappings":"AAAA,OAAA,mBAAA,MAAA,0CAAA;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,SAASC,sBAAT,GAAkC;;;EACvC,IAA8BD,GAAqB,GAAA,gBAAA,CAArBA,KAAK,CAACI,QAANJ,CAAe,KAAfA,CAAqB,EAAA,CAAA,CAAnD;EAAA,IAAOE,OAAO,GAAgBF,GAAqB,CAArC,CAAqC,CAAnD;EAAA,IAAgBG,UAAU,GAAIH,GAAqB,CAAzB,CAAyB,CAAnD;;EACA,IAAMK,UAAU,GAAGL,KAAK,CAACM,MAANN,CAAa,KAAbA,CAAnB;;EAEA,IAAMO,gBAAgB,GAAGC,SAAnBD,gBAAmBC,CAAAA,KAAAA,EAAS;IAChC,IAAIH,UAAU,CAACI,OAAf,EAAwB;MACtBN,UAAU,CAACK,KAAD,CAAVL;IACD;EACD,CAJF;;EAMAH,KAAK,CAACU,SAANV,CAAgB,YAAM;IACpBK,UAAU,CAACI,OAAXJ,GAAqB,IAArBA;;aAEeM,e,GAAe;aAAfA,gBAAe,CAAA,KAAfA,CAAe,IAAfA,EAAe,SAAfA,C;;;aAAAA,gB,GAAe;MAAfA,gBAAe,GAA9B,mBAAA,CAAA,mBAAA,IAAA,CAAA,SAAA,OAAA,GAAiC;YACzBC,G;;;;;;uBAAYC,iBAAiB,CAACC,qBAAlBD,E;;;gBAAZD,GAAG,GAAA,IAAA,CAAA,IAAHA;gBACNL,gBAAgB,CAACK,GAAD,CAAhBL;;;;;;;;MACD,CAHD,CAAA,CAAeI;aAAAA,gBAAe,CAAA,KAAfA,CAAe,IAAfA,EAAe,SAAfA,C;;;IAKf,IAAII,OAAO,GAAGF,iBAAiB,CAACG,gBAAlBH,CAAmC,qBAAnCA,EAA0DI,UAAAA,KAAAA,EAAS;MAC/EV,gBAAgB,CAACU,KAAD,CAAhBV;IACD,CAFaM,CAAd;IAGAF,eAAe;IACf,OAAO,YAAM;MACXN,UAAU,CAACI,OAAXJ,GAAqB,KAArBA;MACAQ,iBAAiB,CAACK,mBAAlBL,CAAsC,qBAAtCA,EAA6DE,OAA7DF;IACD,CAHD;EAID,CAhBDb;EAiBA,OAAOE,OAAP;AACD;;GA5BeD,sB,EAAsB,8B","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = value => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler = AccessibilityInfo.addEventListener('screenReaderChanged', event => {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}\n//# sourceMappingURL=useScreenReaderEnabled.js.map"]},"metadata":{},"sourceType":"module"}